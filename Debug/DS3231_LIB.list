
DS3231_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08003074  08003074  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003074  08003074  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000038  080030b4  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080030b4  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a632  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001828  00000000  00000000  0002a693  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002bec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017525  00000000  00000000  0002d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e88  00000000  00000000  000445d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008490b  00000000  00000000  0004c45d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0d68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002568  00000000  00000000  000d0de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f90 	.word	0x08002f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002f90 	.word	0x08002f90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <time_write>:
 *
 */


void time_write(int hr,int min,int sec,int format)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af04      	add	r7, sp, #16
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[3];
	uint16_t Devaddress=(Dev<<1);
 800016a:	4b2a      	ldr	r3, [pc, #168]	; (8000214 <time_write+0xb8>)
 800016c:	881b      	ldrh	r3, [r3, #0]
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	82fb      	strh	r3, [r7, #22]
	MemAddress=0x00;
 8000172:	2300      	movs	r3, #0
 8000174:	757b      	strb	r3, [r7, #21]

	//pata[2]=integer_to_bcd(hr);

	if(format==HR_FORMAT_24)
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d106      	bne.n	800018a <time_write+0x2e>
	pata[2]=integer_to_bcd(hr);
 800017c:	68f8      	ldr	r0, [r7, #12]
 800017e:	f000 fc11 	bl	80009a4 <integer_to_bcd>
 8000182:	4603      	mov	r3, r0
 8000184:	b2db      	uxtb	r3, r3
 8000186:	74bb      	strb	r3, [r7, #18]
 8000188:	e024      	b.n	80001d4 <time_write+0x78>
	else
	{
	pata[2]=integer_to_bcd(hr)|(1<<6);
 800018a:	68f8      	ldr	r0, [r7, #12]
 800018c:	f000 fc0a 	bl	80009a4 <integer_to_bcd>
 8000190:	4603      	mov	r3, r0
 8000192:	b25b      	sxtb	r3, r3
 8000194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000198:	b25b      	sxtb	r3, r3
 800019a:	b2db      	uxtb	r3, r3
 800019c:	74bb      	strb	r3, [r7, #18]
	if(format==HR_FORMAT_12_PM)
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d10a      	bne.n	80001ba <time_write+0x5e>
		pata[2]=integer_to_bcd(hr)|(1<<6)|(1<<5);
 80001a4:	68f8      	ldr	r0, [r7, #12]
 80001a6:	f000 fbfd 	bl	80009a4 <integer_to_bcd>
 80001aa:	4603      	mov	r3, r0
 80001ac:	b25b      	sxtb	r3, r3
 80001ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	74bb      	strb	r3, [r7, #18]
 80001b8:	e00c      	b.n	80001d4 <time_write+0x78>
	else if(format==HR_FORMAT_12_AM)
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d109      	bne.n	80001d4 <time_write+0x78>
		pata[2]=integer_to_bcd(hr)|(1<<6);
 80001c0:	68f8      	ldr	r0, [r7, #12]
 80001c2:	f000 fbef 	bl	80009a4 <integer_to_bcd>
 80001c6:	4603      	mov	r3, r0
 80001c8:	b25b      	sxtb	r3, r3
 80001ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ce:	b25b      	sxtb	r3, r3
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	74bb      	strb	r3, [r7, #18]
	}

	pata[1]=integer_to_bcd(min);
 80001d4:	68b8      	ldr	r0, [r7, #8]
 80001d6:	f000 fbe5 	bl	80009a4 <integer_to_bcd>
 80001da:	4603      	mov	r3, r0
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	747b      	strb	r3, [r7, #17]
	pata[0]=integer_to_bcd(sec);
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 fbdf 	bl	80009a4 <integer_to_bcd>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	743b      	strb	r3, [r7, #16]



	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,3,1000);
 80001ec:	7d7b      	ldrb	r3, [r7, #21]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	8af9      	ldrh	r1, [r7, #22]
 80001f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f6:	9302      	str	r3, [sp, #8]
 80001f8:	2303      	movs	r3, #3
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <time_write+0xbc>)
 8000206:	f001 fa0d 	bl	8001624 <HAL_I2C_Mem_Write>


}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028
 8000218:	20000054 	.word	0x20000054

0800021c <date_write>:




void date_write(int day,int date,int month,int year)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	; 0x28
 8000220:	af04      	add	r7, sp, #16
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[4];
	uint16_t Devaddress=(Dev<<1);
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <date_write+0x70>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	82fb      	strh	r3, [r7, #22]
	MemAddress=0x03;
 8000232:	2303      	movs	r3, #3
 8000234:	757b      	strb	r3, [r7, #21]
	pata[0]=integer_to_bcd(day);
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f000 fbb4 	bl	80009a4 <integer_to_bcd>
 800023c:	4603      	mov	r3, r0
 800023e:	b2db      	uxtb	r3, r3
 8000240:	743b      	strb	r3, [r7, #16]
	pata[1]=integer_to_bcd(date);
 8000242:	68b8      	ldr	r0, [r7, #8]
 8000244:	f000 fbae 	bl	80009a4 <integer_to_bcd>
 8000248:	4603      	mov	r3, r0
 800024a:	b2db      	uxtb	r3, r3
 800024c:	747b      	strb	r3, [r7, #17]
	pata[2]=integer_to_bcd(month);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 fba8 	bl	80009a4 <integer_to_bcd>
 8000254:	4603      	mov	r3, r0
 8000256:	b2db      	uxtb	r3, r3
 8000258:	74bb      	strb	r3, [r7, #18]
	pata[3]=integer_to_bcd(year);
 800025a:	6838      	ldr	r0, [r7, #0]
 800025c:	f000 fba2 	bl	80009a4 <integer_to_bcd>
 8000260:	4603      	mov	r3, r0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	74fb      	strb	r3, [r7, #19]



	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,4,1000);
 8000266:	7d7b      	ldrb	r3, [r7, #21]
 8000268:	b29a      	uxth	r2, r3
 800026a:	8af9      	ldrh	r1, [r7, #22]
 800026c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000270:	9302      	str	r3, [sp, #8]
 8000272:	2304      	movs	r3, #4
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <date_write+0x74>)
 8000280:	f001 f9d0 	bl	8001624 <HAL_I2C_Mem_Write>


}
 8000284:	bf00      	nop
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	20000054 	.word	0x20000054

08000294 <read_time>:
 *
 *
 */

void read_time()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af04      	add	r7, sp, #16
	uint8_t MemAddress=TIME;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]

	uint16_t Devaddress=(Dev<<1);
 800029e:	4b39      	ldr	r3, [pc, #228]	; (8000384 <read_time+0xf0>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	813b      	strh	r3, [r7, #8]
	 // HAL_I2C_Master_Transmit(&hi2c1,Devaddress, pData,2,1000);

	  uint8_t data[5];
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,3,1000);
 80002a6:	7afb      	ldrb	r3, [r7, #11]
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	8939      	ldrh	r1, [r7, #8]
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	2303      	movs	r3, #3
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	463b      	mov	r3, r7
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2301      	movs	r3, #1
 80002bc:	4832      	ldr	r0, [pc, #200]	; (8000388 <read_time+0xf4>)
 80002be:	f001 faab 	bl	8001818 <HAL_I2C_Mem_Read>
uint8_t second=data[0];
 80002c2:	783b      	ldrb	r3, [r7, #0]
 80002c4:	71fb      	strb	r3, [r7, #7]
uint8_t minute=data[1];
 80002c6:	787b      	ldrb	r3, [r7, #1]
 80002c8:	71bb      	strb	r3, [r7, #6]
uint8_t hour=data[2];
 80002ca:	78bb      	ldrb	r3, [r7, #2]
 80002cc:	75fb      	strb	r3, [r7, #23]
char *hour_format="";
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <read_time+0xf8>)
 80002d0:	613b      	str	r3, [r7, #16]
int hr1=0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
//if 6th bit is  set which means it follows 12 hour format check 5th bit to know AM /PM
if((hour & (1<<6))!=0)
 80002d6:	7dfb      	ldrb	r3, [r7, #23]
 80002d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <read_time+0x6c>
{
hr1=1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
if((hour & (1<<5))!=0)
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	f003 0320 	and.w	r3, r3, #32
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d006      	beq.n	80002fc <read_time+0x68>
{hour_format="PM";
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <read_time+0xfc>)
 80002f0:	613b      	str	r3, [r7, #16]
hour &=~(1<<5);
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	f023 0320 	bic.w	r3, r3, #32
 80002f8:	75fb      	strb	r3, [r7, #23]
 80002fa:	e001      	b.n	8000300 <read_time+0x6c>
}
else
	hour_format="AM";
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <read_time+0x100>)
 80002fe:	613b      	str	r3, [r7, #16]


}
//else it follows 24 hpour format

hour &=~(1<<6);
 8000300:	7dfb      	ldrb	r3, [r7, #23]
 8000302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000306:	75fb      	strb	r3, [r7, #23]


hour=bcd_to_integer(hour);
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fb70 	bl	80009f0 <bcd_to_integer>
 8000310:	4603      	mov	r3, r0
 8000312:	75fb      	strb	r3, [r7, #23]
minute=bcd_to_integer(minute);
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fb6a 	bl	80009f0 <bcd_to_integer>
 800031c:	4603      	mov	r3, r0
 800031e:	71bb      	strb	r3, [r7, #6]
second=bcd_to_integer(second);
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fb64 	bl	80009f0 <bcd_to_integer>
 8000328:	4603      	mov	r3, r0
 800032a:	71fb      	strb	r3, [r7, #7]
print(int_to_char(hour));
 800032c:	7dfb      	ldrb	r3, [r7, #23]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 faae 	bl	8000890 <int_to_char>
 8000334:	4603      	mov	r3, r0
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fa94 	bl	8000864 <print>
print("-hour");
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <read_time+0x104>)
 800033e:	f000 fa91 	bl	8000864 <print>
print(int_to_char(minute));
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 faa3 	bl	8000890 <int_to_char>
 800034a:	4603      	mov	r3, r0
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fa89 	bl	8000864 <print>
print("-minute");
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <read_time+0x108>)
 8000354:	f000 fa86 	bl	8000864 <print>
print(int_to_char(second));
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fa98 	bl	8000890 <int_to_char>
 8000360:	4603      	mov	r3, r0
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fa7e 	bl	8000864 <print>
print("-second");
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <read_time+0x10c>)
 800036a:	f000 fa7b 	bl	8000864 <print>
if(hr1==1)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d102      	bne.n	800037a <read_time+0xe6>
print(hour_format);
 8000374:	6938      	ldr	r0, [r7, #16]
 8000376:	f000 fa75 	bl	8000864 <print>


}
 800037a:	bf00      	nop
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	20000054 	.word	0x20000054
 800038c:	08002fa8 	.word	0x08002fa8
 8000390:	08002ff0 	.word	0x08002ff0
 8000394:	08002ff4 	.word	0x08002ff4
 8000398:	08002ff8 	.word	0x08002ff8
 800039c:	08003000 	.word	0x08003000
 80003a0:	08003008 	.word	0x08003008

080003a4 <read_date>:

void read_date()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af04      	add	r7, sp, #16
	uint8_t MemAddress=DATE;
 80003aa:	2303      	movs	r3, #3
 80003ac:	75fb      	strb	r3, [r7, #23]

	uint16_t Devaddress=(Dev<<1);
 80003ae:	4b33      	ldr	r3, [pc, #204]	; (800047c <read_date+0xd8>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	82bb      	strh	r3, [r7, #20]
	 // HAL_I2C_Master_Transmit(&hi2c1,Devaddress, pData,2,1000);

	  uint8_t data[5];
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,4,1000);
 80003b6:	7dfb      	ldrb	r3, [r7, #23]
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	8ab9      	ldrh	r1, [r7, #20]
 80003bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	2304      	movs	r3, #4
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	482c      	ldr	r0, [pc, #176]	; (8000480 <read_date+0xdc>)
 80003ce:	f001 fa23 	bl	8001818 <HAL_I2C_Mem_Read>
uint8_t day=data[0];
 80003d2:	793b      	ldrb	r3, [r7, #4]
 80003d4:	74fb      	strb	r3, [r7, #19]
uint8_t date=data[1];
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	74bb      	strb	r3, [r7, #18]
uint8_t month=data[2];
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	747b      	strb	r3, [r7, #17]
uint8_t year=data[3];
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	743b      	strb	r3, [r7, #16]
char *year_format="";
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <read_date+0xe0>)
 80003e4:	60fb      	str	r3, [r7, #12]

month&=~(1<<7);
 80003e6:	7c7b      	ldrb	r3, [r7, #17]
 80003e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ec:	747b      	strb	r3, [r7, #17]

year=bcd_to_integer(year);
 80003ee:	7c3b      	ldrb	r3, [r7, #16]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fafd 	bl	80009f0 <bcd_to_integer>
 80003f6:	4603      	mov	r3, r0
 80003f8:	743b      	strb	r3, [r7, #16]
month=bcd_to_integer(month);
 80003fa:	7c7b      	ldrb	r3, [r7, #17]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 faf7 	bl	80009f0 <bcd_to_integer>
 8000402:	4603      	mov	r3, r0
 8000404:	747b      	strb	r3, [r7, #17]
date=bcd_to_integer(date);
 8000406:	7cbb      	ldrb	r3, [r7, #18]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 faf1 	bl	80009f0 <bcd_to_integer>
 800040e:	4603      	mov	r3, r0
 8000410:	74bb      	strb	r3, [r7, #18]
print("****************");
 8000412:	481d      	ldr	r0, [pc, #116]	; (8000488 <read_date+0xe4>)
 8000414:	f000 fa26 	bl	8000864 <print>
print(int_to_char(year));
 8000418:	7c3b      	ldrb	r3, [r7, #16]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fa38 	bl	8000890 <int_to_char>
 8000420:	4603      	mov	r3, r0
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fa1e 	bl	8000864 <print>
print("-year");
 8000428:	4818      	ldr	r0, [pc, #96]	; (800048c <read_date+0xe8>)
 800042a:	f000 fa1b 	bl	8000864 <print>
print(int_to_char(month));
 800042e:	7c7b      	ldrb	r3, [r7, #17]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fa2d 	bl	8000890 <int_to_char>
 8000436:	4603      	mov	r3, r0
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fa13 	bl	8000864 <print>
print("-month");
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <read_date+0xec>)
 8000440:	f000 fa10 	bl	8000864 <print>
print(int_to_char(date));
 8000444:	7cbb      	ldrb	r3, [r7, #18]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fa22 	bl	8000890 <int_to_char>
 800044c:	4603      	mov	r3, r0
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fa08 	bl	8000864 <print>
print("-date");
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <read_date+0xf0>)
 8000456:	f000 fa05 	bl	8000864 <print>
print("day-");
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <read_date+0xf4>)
 800045c:	f000 fa02 	bl	8000864 <print>
print(weekday[day]);
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <read_date+0xf8>)
 8000464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f9fb 	bl	8000864 <print>
print("****************");
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <read_date+0xe4>)
 8000470:	f000 f9f8 	bl	8000864 <print>


}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000028 	.word	0x20000028
 8000480:	20000054 	.word	0x20000054
 8000484:	08002fa8 	.word	0x08002fa8
 8000488:	08003010 	.word	0x08003010
 800048c:	08003024 	.word	0x08003024
 8000490:	0800302c 	.word	0x0800302c
 8000494:	08003034 	.word	0x08003034
 8000498:	0800303c 	.word	0x0800303c
 800049c:	20000000 	.word	0x20000000

080004a0 <alarm_write>:
 *
 */


void alarm_write(int hr,int min,int sec,int format,int day,int date,int mode)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af04      	add	r7, sp, #16
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[5];
	uint16_t Devaddress=(Dev<<1);
 80004ae:	4b79      	ldr	r3, [pc, #484]	; (8000694 <alarm_write+0x1f4>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	83fb      	strh	r3, [r7, #30]




	//pata[2]=integer_to_bcd(hr);
	pata[0]=integer_to_bcd(sec);
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f000 fa74 	bl	80009a4 <integer_to_bcd>
 80004bc:	4603      	mov	r3, r0
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	763b      	strb	r3, [r7, #24]
	pata[1]=integer_to_bcd(min);
 80004c2:	68b8      	ldr	r0, [r7, #8]
 80004c4:	f000 fa6e 	bl	80009a4 <integer_to_bcd>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	767b      	strb	r3, [r7, #25]
	pata[3]=integer_to_bcd(date);
 80004ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004d0:	f000 fa68 	bl	80009a4 <integer_to_bcd>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	76fb      	strb	r3, [r7, #27]

	if(format==HR_FORMAT_24)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d106      	bne.n	80004ee <alarm_write+0x4e>
	pata[2]=integer_to_bcd(hr);
 80004e0:	68f8      	ldr	r0, [r7, #12]
 80004e2:	f000 fa5f 	bl	80009a4 <integer_to_bcd>
 80004e6:	4603      	mov	r3, r0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	76bb      	strb	r3, [r7, #26]
 80004ec:	e024      	b.n	8000538 <alarm_write+0x98>
	else
	{
	pata[2]=integer_to_bcd(hr)|(1<<6);
 80004ee:	68f8      	ldr	r0, [r7, #12]
 80004f0:	f000 fa58 	bl	80009a4 <integer_to_bcd>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	76bb      	strb	r3, [r7, #26]
	if(format==HR_FORMAT_12_PM)
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d10a      	bne.n	800051e <alarm_write+0x7e>
		pata[2]=integer_to_bcd(hr)|(1<<6)|(1<<5);
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f000 fa4b 	bl	80009a4 <integer_to_bcd>
 800050e:	4603      	mov	r3, r0
 8000510:	b25b      	sxtb	r3, r3
 8000512:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000516:	b25b      	sxtb	r3, r3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	76bb      	strb	r3, [r7, #26]
 800051c:	e00c      	b.n	8000538 <alarm_write+0x98>
	else if(format==HR_FORMAT_12_AM)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d109      	bne.n	8000538 <alarm_write+0x98>
		pata[2]=integer_to_bcd(hr)|(1<<6);
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f000 fa3d 	bl	80009a4 <integer_to_bcd>
 800052a:	4603      	mov	r3, r0
 800052c:	b25b      	sxtb	r3, r3
 800052e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000532:	b25b      	sxtb	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	76bb      	strb	r3, [r7, #26]
	}

	switch(mode)
 8000538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800053a:	2b05      	cmp	r3, #5
 800053c:	d84a      	bhi.n	80005d4 <alarm_write+0x134>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <alarm_write+0xa4>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	0800055d 	.word	0x0800055d
 8000548:	080005d5 	.word	0x080005d5
 800054c:	08000569 	.word	0x08000569
 8000550:	08000575 	.word	0x08000575
 8000554:	0800058b 	.word	0x0800058b
 8000558:	080005ab 	.word	0x080005ab
	{
	case ALARM_DY_H_M_S:
	{
		pata[3]|=(1<<6);
 800055c:	7efb      	ldrb	r3, [r7, #27]
 800055e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000562:	b2db      	uxtb	r3, r3
 8000564:	76fb      	strb	r3, [r7, #27]
	break;
 8000566:	e036      	b.n	80005d6 <alarm_write+0x136>
	}
	case ALARM_H_M_S:
	{
		pata[3]|=(1<<7);
 8000568:	7efb      	ldrb	r3, [r7, #27]
 800056a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800056e:	b2db      	uxtb	r3, r3
 8000570:	76fb      	strb	r3, [r7, #27]
		break;
 8000572:	e030      	b.n	80005d6 <alarm_write+0x136>
	}
	case ALARM_M_S:
	{
		pata[2]|=(1<<7);
 8000574:	7ebb      	ldrb	r3, [r7, #26]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 800057e:	7efb      	ldrb	r3, [r7, #27]
 8000580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000584:	b2db      	uxtb	r3, r3
 8000586:	76fb      	strb	r3, [r7, #27]
		break;
 8000588:	e025      	b.n	80005d6 <alarm_write+0x136>
	}
	case ALARM_S:
	{   pata[1]|=(1<<7);
 800058a:	7e7b      	ldrb	r3, [r7, #25]
 800058c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000590:	b2db      	uxtb	r3, r3
 8000592:	767b      	strb	r3, [r7, #25]
		pata[2]|=(1<<7);
 8000594:	7ebb      	ldrb	r3, [r7, #26]
 8000596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800059a:	b2db      	uxtb	r3, r3
 800059c:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 800059e:	7efb      	ldrb	r3, [r7, #27]
 80005a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	76fb      	strb	r3, [r7, #27]
		break;
 80005a8:	e015      	b.n	80005d6 <alarm_write+0x136>
	}
	case ALARM_ONCE_PER_SECOND:
	{
		pata[0]|=(1<<7);
 80005aa:	7e3b      	ldrb	r3, [r7, #24]
 80005ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	763b      	strb	r3, [r7, #24]
		pata[1]|=(1<<7);
 80005b4:	7e7b      	ldrb	r3, [r7, #25]
 80005b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	767b      	strb	r3, [r7, #25]
		pata[2]|=(1<<7);
 80005be:	7ebb      	ldrb	r3, [r7, #26]
 80005c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 80005c8:	7efb      	ldrb	r3, [r7, #27]
 80005ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	76fb      	strb	r3, [r7, #27]
		break;
 80005d2:	e000      	b.n	80005d6 <alarm_write+0x136>
	}

default:
	break;
 80005d4:	bf00      	nop


	}

	MemAddress=ALARM;
 80005d6:	2307      	movs	r3, #7
 80005d8:	777b      	strb	r3, [r7, #29]

		HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,4,1000);
 80005da:	7f7b      	ldrb	r3, [r7, #29]
 80005dc:	b29a      	uxth	r2, r3
 80005de:	8bf9      	ldrh	r1, [r7, #30]
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	2304      	movs	r3, #4
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	4829      	ldr	r0, [pc, #164]	; (8000698 <alarm_write+0x1f8>)
 80005f4:	f001 f816 	bl	8001624 <HAL_I2C_Mem_Write>

	MemAddress=CONTROL;
 80005f8:	230e      	movs	r3, #14
 80005fa:	777b      	strb	r3, [r7, #29]
	  uint8_t data;
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,1,1000);
 80005fc:	7f7b      	ldrb	r3, [r7, #29]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	8bf9      	ldrh	r1, [r7, #30]
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	f107 0317 	add.w	r3, r7, #23
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	4820      	ldr	r0, [pc, #128]	; (8000698 <alarm_write+0x1f8>)
 8000616:	f001 f8ff 	bl	8001818 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
	 data |=CONTROL_INTCN | ALARM_A11E;
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	f043 0305 	orr.w	r3, r3, #5
 8000620:	b2db      	uxtb	r3, r3
 8000622:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
 8000624:	7f7b      	ldrb	r3, [r7, #29]
 8000626:	b29a      	uxth	r2, r3
 8000628:	8bf9      	ldrh	r1, [r7, #30]
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	f107 0317 	add.w	r3, r7, #23
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4816      	ldr	r0, [pc, #88]	; (8000698 <alarm_write+0x1f8>)
 800063e:	f000 fff1 	bl	8001624 <HAL_I2C_Mem_Write>


	 MemAddress=CONTROL_STATUS;
 8000642:	230f      	movs	r3, #15
 8000644:	777b      	strb	r3, [r7, #29]

	HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,1,1000);
 8000646:	7f7b      	ldrb	r3, [r7, #29]
 8000648:	b29a      	uxth	r2, r3
 800064a:	8bf9      	ldrh	r1, [r7, #30]
 800064c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2301      	movs	r3, #1
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f107 0317 	add.w	r3, r7, #23
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2301      	movs	r3, #1
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <alarm_write+0x1f8>)
 8000660:	f001 f8da 	bl	8001818 <HAL_I2C_Mem_Read>

			//HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);

		 data &=~ALARM_A1F;
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	75fb      	strb	r3, [r7, #23]
			HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
 800066e:	7f7b      	ldrb	r3, [r7, #29]
 8000670:	b29a      	uxth	r2, r3
 8000672:	8bf9      	ldrh	r1, [r7, #30]
 8000674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2301      	movs	r3, #1
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	f107 0317 	add.w	r3, r7, #23
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <alarm_write+0x1f8>)
 8000688:	f000 ffcc 	bl	8001624 <HAL_I2C_Mem_Write>


}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	20000054 	.word	0x20000054

0800069c <alarm_write2>:


void alarm_write2(int hr,int min,int format,int day,int date,int mode)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress=ALARM2;
 80006aa:	230b      	movs	r3, #11
 80006ac:	77fb      	strb	r3, [r7, #31]
	uint8_t	 pata[5];
	uint16_t Devaddress=(Dev<<1);
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <alarm_write2+0x1c0>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	83bb      	strh	r3, [r7, #28]



	//pata[2]=integer_to_bcd(hr);
	//pata[0]=integer_to_bcd(sec);
	pata[0]=integer_to_bcd(min);
 80006b6:	68b8      	ldr	r0, [r7, #8]
 80006b8:	f000 f974 	bl	80009a4 <integer_to_bcd>
 80006bc:	4603      	mov	r3, r0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	753b      	strb	r3, [r7, #20]
	pata[2]=integer_to_bcd(date);
 80006c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006c4:	f000 f96e 	bl	80009a4 <integer_to_bcd>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	75bb      	strb	r3, [r7, #22]

	if(format==HR_FORMAT_24)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d106      	bne.n	80006e2 <alarm_write2+0x46>
	pata[1]=integer_to_bcd(hr);
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 f965 	bl	80009a4 <integer_to_bcd>
 80006da:	4603      	mov	r3, r0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	757b      	strb	r3, [r7, #21]
 80006e0:	e024      	b.n	800072c <alarm_write2+0x90>
	else
	{
	pata[1]=integer_to_bcd(hr)|(1<<6);
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f000 f95e 	bl	80009a4 <integer_to_bcd>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	757b      	strb	r3, [r7, #21]
	if(format==HR_FORMAT_12_PM)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d10a      	bne.n	8000712 <alarm_write2+0x76>
		pata[1]=integer_to_bcd(hr)|(1<<6)|(1<<5);
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f000 f951 	bl	80009a4 <integer_to_bcd>
 8000702:	4603      	mov	r3, r0
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800070a:	b25b      	sxtb	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	757b      	strb	r3, [r7, #21]
 8000710:	e00c      	b.n	800072c <alarm_write2+0x90>
	else if(format==HR_FORMAT_12_AM)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d109      	bne.n	800072c <alarm_write2+0x90>
		pata[1]=integer_to_bcd(hr)|(1<<6);
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f943 	bl	80009a4 <integer_to_bcd>
 800071e:	4603      	mov	r3, r0
 8000720:	b25b      	sxtb	r3, r3
 8000722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	757b      	strb	r3, [r7, #21]
	}

	switch(mode)
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	2b04      	cmp	r3, #4
 8000730:	d833      	bhi.n	800079a <alarm_write2+0xfe>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <alarm_write2+0x9c>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	0800077b 	.word	0x0800077b
 800073c:	08000765 	.word	0x08000765
 8000740:	08000759 	.word	0x08000759
 8000744:	0800079b 	.word	0x0800079b
 8000748:	0800074d 	.word	0x0800074d
	{
	case ALARM_DY_H_M:
	{
		pata[2]|=(1<<6);
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000752:	b2db      	uxtb	r3, r3
 8000754:	75bb      	strb	r3, [r7, #22]
	break;
 8000756:	e021      	b.n	800079c <alarm_write2+0x100>

		break;
	}
	case ALARM_H_M:
	{
		pata[2]|=(1<<7);
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800075e:	b2db      	uxtb	r3, r3
 8000760:	75bb      	strb	r3, [r7, #22]

		break;
 8000762:	e01b      	b.n	800079c <alarm_write2+0x100>
	}
	case ALARM_M:
	{   pata[1]|=(1<<7);
 8000764:	7d7b      	ldrb	r3, [r7, #21]
 8000766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800076a:	b2db      	uxtb	r3, r3
 800076c:	757b      	strb	r3, [r7, #21]
		pata[2]|=(1<<7);
 800076e:	7dbb      	ldrb	r3, [r7, #22]
 8000770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000774:	b2db      	uxtb	r3, r3
 8000776:	75bb      	strb	r3, [r7, #22]

		break;
 8000778:	e010      	b.n	800079c <alarm_write2+0x100>
	}
	case ALARM_ONCE_PER_MIN:
	{
		pata[0]|=(1<<7);
 800077a:	7d3b      	ldrb	r3, [r7, #20]
 800077c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000780:	b2db      	uxtb	r3, r3
 8000782:	753b      	strb	r3, [r7, #20]
		pata[1]|=(1<<7);
 8000784:	7d7b      	ldrb	r3, [r7, #21]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	b2db      	uxtb	r3, r3
 800078c:	757b      	strb	r3, [r7, #21]
		pata[2]|=(1<<7);
 800078e:	7dbb      	ldrb	r3, [r7, #22]
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	75bb      	strb	r3, [r7, #22]

		break;
 8000798:	e000      	b.n	800079c <alarm_write2+0x100>
	}

default:
	break;
 800079a:	bf00      	nop


	}

	MemAddress=ALARM2;
 800079c:	230b      	movs	r3, #11
 800079e:	77fb      	strb	r3, [r7, #31]

		HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,3,1000);
 80007a0:	7ffb      	ldrb	r3, [r7, #31]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	8bb9      	ldrh	r1, [r7, #28]
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	2303      	movs	r3, #3
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	4829      	ldr	r0, [pc, #164]	; (8000860 <alarm_write2+0x1c4>)
 80007ba:	f000 ff33 	bl	8001624 <HAL_I2C_Mem_Write>

	MemAddress=CONTROL;
 80007be:	230e      	movs	r3, #14
 80007c0:	77fb      	strb	r3, [r7, #31]
	  uint8_t data;
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,1,1000);
 80007c2:	7ffb      	ldrb	r3, [r7, #31]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	8bb9      	ldrh	r1, [r7, #28]
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f107 0313 	add.w	r3, r7, #19
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <alarm_write2+0x1c4>)
 80007dc:	f001 f81c 	bl	8001818 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
	  data |=CONTROL_INTCN | ALARM_A21E;
 80007e0:	7cfb      	ldrb	r3, [r7, #19]
 80007e2:	f043 0306 	orr.w	r3, r3, #6
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	74fb      	strb	r3, [r7, #19]
	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
 80007ea:	7ffb      	ldrb	r3, [r7, #31]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	8bb9      	ldrh	r1, [r7, #28]
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	f107 0313 	add.w	r3, r7, #19
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <alarm_write2+0x1c4>)
 8000804:	f000 ff0e 	bl	8001624 <HAL_I2C_Mem_Write>


	 MemAddress=CONTROL_STATUS;
 8000808:	230f      	movs	r3, #15
 800080a:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,1,1000);
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	b29a      	uxth	r2, r3
 8000810:	8bb9      	ldrh	r1, [r7, #28]
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	f107 0313 	add.w	r3, r7, #19
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <alarm_write2+0x1c4>)
 8000826:	f000 fff7 	bl	8001818 <HAL_I2C_Mem_Read>

			//HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);

		 data &=~ALARM_A2F;
 800082a:	7cfb      	ldrb	r3, [r7, #19]
 800082c:	f023 0302 	bic.w	r3, r3, #2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	74fb      	strb	r3, [r7, #19]
			HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
 8000834:	7ffb      	ldrb	r3, [r7, #31]
 8000836:	b29a      	uxth	r2, r3
 8000838:	8bb9      	ldrh	r1, [r7, #28]
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2301      	movs	r3, #1
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f107 0313 	add.w	r3, r7, #19
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <alarm_write2+0x1c4>)
 800084e:	f000 fee9 	bl	8001624 <HAL_I2C_Mem_Write>


}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000028 	.word	0x20000028
 8000860:	20000054 	.word	0x20000054

08000864 <print>:



//A10-RX A09-TX
void print(char *data)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(char *)data,strlen(data),1000);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fc6d 	bl	800014c <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	b29a      	uxth	r2, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <print+0x28>)
 800087e:	f002 f9f0 	bl	8002c62 <HAL_UART_Transmit>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000a8 	.word	0x200000a8

08000890 <int_to_char>:

return p;
}

char *int_to_char(int c)
{
 8000890:	b480      	push	{r7}
 8000892:	b0a5      	sub	sp, #148	; 0x94
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 char s[100];

 int rem;
 int i=0;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 if(c==0)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d126      	bne.n	80008f2 <int_to_char+0x62>
 return "0";
 80008a4:	4b3d      	ldr	r3, [pc, #244]	; (800099c <int_to_char+0x10c>)
 80008a6:	e073      	b.n	8000990 <int_to_char+0x100>

while(c!=0)
{

rem=c%10;
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4b3d      	ldr	r3, [pc, #244]	; (80009a0 <int_to_char+0x110>)
 80008ac:	fb83 1302 	smull	r1, r3, r3, r2
 80008b0:	1099      	asrs	r1, r3, #2
 80008b2:	17d3      	asrs	r3, r2, #31
 80008b4:	1ac9      	subs	r1, r1, r3
 80008b6:	460b      	mov	r3, r1
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	67fb      	str	r3, [r7, #124]	; 0x7c
s[i]=rem + '0';
 80008c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3330      	adds	r3, #48	; 0x30
 80008c8:	b2d9      	uxtb	r1, r3
 80008ca:	f107 0218 	add.w	r2, r7, #24
 80008ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008d2:	4413      	add	r3, r2
 80008d4:	460a      	mov	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]

c=c/10;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <int_to_char+0x110>)
 80008dc:	fb82 1203 	smull	r1, r2, r2, r3
 80008e0:	1092      	asrs	r2, r2, #2
 80008e2:	17db      	asrs	r3, r3, #31
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	607b      	str	r3, [r7, #4]
i++;
 80008e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008ec:	3301      	adds	r3, #1
 80008ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(c!=0)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1d7      	bne.n	80008a8 <int_to_char+0x18>
}
s[i]='\0';
 80008f8:	f107 0218 	add.w	r2, r7, #24
 80008fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000900:	4413      	add	r3, r2
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
//printf(" ********%s******* ",s);
char u[10];
char *k=u;
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
for(int i=0;s[i]!='\0';i++){}
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000914:	e004      	b.n	8000920 <int_to_char+0x90>
 8000916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800091a:	3301      	adds	r3, #1
 800091c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000920:	f107 0218 	add.w	r2, r7, #24
 8000924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000928:	4413      	add	r3, r2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1f2      	bne.n	8000916 <int_to_char+0x86>
//printf(" %c ",s[i]);
//printf(" %s ",s);
i--;
 8000930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000934:	3b01      	subs	r3, #1
 8000936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
int j=0;
 800093a:	2300      	movs	r3, #0
 800093c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
for(j=0;i>=0;i--,j++)
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000946:	e016      	b.n	8000976 <int_to_char+0xe6>
{
 u[j]=s[i];
 8000948:	f107 0218 	add.w	r2, r7, #24
 800094c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000950:	4413      	add	r3, r2
 8000952:	7819      	ldrb	r1, [r3, #0]
 8000954:	f107 020c 	add.w	r2, r7, #12
 8000958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800095c:	4413      	add	r3, r2
 800095e:	460a      	mov	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
for(j=0;i>=0;i--,j++)
 8000962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000966:	3b01      	subs	r3, #1
 8000968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800096c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000970:	3301      	adds	r3, #1
 8000972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800097a:	2b00      	cmp	r3, #0
 800097c:	dae4      	bge.n	8000948 <int_to_char+0xb8>


}

u[j]='\0';
 800097e:	f107 020c 	add.w	r2, r7, #12
 8000982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000986:	4413      	add	r3, r2
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

//printf(" %s ",k);
return k;
 800098c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
}
 8000990:	4618      	mov	r0, r3
 8000992:	3794      	adds	r7, #148	; 0x94
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	08003044 	.word	0x08003044
 80009a0:	66666667 	.word	0x66666667

080009a4 <integer_to_bcd>:
}

return c;
}
int integer_to_bcd(int num)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

int ones=num%10;
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <integer_to_bcd+0x48>)
 80009b0:	fb83 1302 	smull	r1, r3, r3, r2
 80009b4:	1099      	asrs	r1, r3, #2
 80009b6:	17d3      	asrs	r3, r2, #31
 80009b8:	1ac9      	subs	r1, r1, r3
 80009ba:	460b      	mov	r3, r1
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	440b      	add	r3, r1
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	60fb      	str	r3, [r7, #12]
int tens=num/10;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <integer_to_bcd+0x48>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1092      	asrs	r2, r2, #2
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	60bb      	str	r3, [r7, #8]

num=(tens<<4)|ones;
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	607b      	str	r3, [r7, #4]


return num;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	66666667 	.word	0x66666667

080009f0 <bcd_to_integer>:

int bcd_to_integer(int num)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

	int ones=(num & 0x0F);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
	int tens=(num & 0xF0);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a06:	60bb      	str	r3, [r7, #8]
tens=tens>>4;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	111b      	asrs	r3, r3, #4
 8000a0c:	60bb      	str	r3, [r7, #8]
	return (tens*10+ones);
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4413      	add	r3, r2



}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fa21 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f849 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 f8db 	bl	8000bf0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3a:	f000 f881 	bl	8000b40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 f8ad 	bl	8000b9c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
int i=15;
 8000a42:	230f      	movs	r3, #15
 8000a44:	61fb      	str	r3, [r7, #28]

uint8_t hr=10;
 8000a46:	230a      	movs	r3, #10
 8000a48:	76fb      	strb	r3, [r7, #27]
uint8_t min=15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	76bb      	strb	r3, [r7, #26]
uint8_t sec=19;
 8000a4e:	2313      	movs	r3, #19
 8000a50:	767b      	strb	r3, [r7, #25]

time_write(hr,min,sec,HR_FORMAT_12_PM);
 8000a52:	7ef8      	ldrb	r0, [r7, #27]
 8000a54:	7eb9      	ldrb	r1, [r7, #26]
 8000a56:	7e7a      	ldrb	r2, [r7, #25]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f7ff fb7f 	bl	800015c <time_write>
int day=MONDAY;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
int date=18;
 8000a62:	2312      	movs	r3, #18
 8000a64:	613b      	str	r3, [r7, #16]
int month=7;
 8000a66:	2307      	movs	r3, #7
 8000a68:	60fb      	str	r3, [r7, #12]
int year=21;
 8000a6a:	2315      	movs	r3, #21
 8000a6c:	60bb      	str	r3, [r7, #8]

date_write(day,date,month,year);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	6978      	ldr	r0, [r7, #20]
 8000a76:	f7ff fbd1 	bl	800021c <date_write>
//min=16;
sec=23;
 8000a7a:	2317      	movs	r3, #23
 8000a7c:	767b      	strb	r3, [r7, #25]
read_time();
 8000a7e:	f7ff fc09 	bl	8000294 <read_time>
read_date();
 8000a82:	f7ff fc8f 	bl	80003a4 <read_date>

alarm_write(hr,min,sec,HR_FORMAT_12_PM,day,date,ALARM_ONCE_PER_SECOND);
 8000a86:	7ef8      	ldrb	r0, [r7, #27]
 8000a88:	7eb9      	ldrb	r1, [r7, #26]
 8000a8a:	7e7a      	ldrb	r2, [r7, #25]
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f7ff fd01 	bl	80004a0 <alarm_write>
alarm_write2(hr,min,HR_FORMAT_12_PM,day,date,ALARM_ONCE_PER_MIN);
 8000a9e:	7ef8      	ldrb	r0, [r7, #27]
 8000aa0:	7eb9      	ldrb	r1, [r7, #26]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	2202      	movs	r2, #2
 8000aae:	f7ff fdf5 	bl	800069c <alarm_write2>

uint8_t MemAddress=CONTROL_STATUS;
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	71fb      	strb	r3, [r7, #7]
uint8_t Devaddress=Dev<<1;
 8000ab6:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <main+0x9c>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	71bb      	strb	r3, [r7, #6]


while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x98>
 8000ac2:	bf00      	nop
 8000ac4:	20000028 	.word	0x20000028

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b090      	sub	sp, #64	; 0x40
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	2228      	movs	r2, #40	; 0x28
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fa52 	bl	8002f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af2:	2310      	movs	r3, #16
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fc46 	bl	8002390 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b0a:	f000 f89f 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 feb2 	bl	8002890 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b32:	f000 f88b 	bl	8000c4c <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3740      	adds	r7, #64	; 0x40
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f000 fc19 	bl	80013b4 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f860 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000054 	.word	0x20000054
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f001 fff8 	bl	8002bc8 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f835 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000a8 	.word	0x200000a8
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <MX_GPIO_Init+0x58>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <Error_Handler+0x6>

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x5c>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_MspInit+0x60>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_MspInit+0x60>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x70>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d123      	bne.n	8000d20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf0:	23c0      	movs	r3, #192	; 0xc0
 8000cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf4:	2312      	movs	r3, #18
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <HAL_I2C_MspInit+0x78>)
 8000d04:	f000 f9fc 	bl	8001100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d12:	61d3      	str	r3, [r2, #28]
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_I2C_MspInit+0x74>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d131      	bne.n	8000db8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <HAL_UART_MspInit+0x94>)
 8000d9a:	f000 f9b1 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0x94>)
 8000db4:	f000 f9a4 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f875 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
	...

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e4e:	f7ff ffe4 	bl	8000e1a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 f871 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff fde7 	bl	8000a28 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000e64:	0800307c 	.word	0x0800307c
  ldr r2, =_sbss
 8000e68:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000e6c:	200000f0 	.word	0x200000f0

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f907 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fee0 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f911 	bl	80010e6 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f8e7 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	20000034 	.word	0x20000034
 8000efc:	20000030 	.word	0x20000030

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	20000034 	.word	0x20000034
 8000f20:	200000ec 	.word	0x200000ec

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	200000ec 	.word	0x200000ec

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff90 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff49 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff90 	bl	8000ff0 <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5f 	bl	8000f9c <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e127      	b.n	8001364 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001114:	2201      	movs	r2, #1
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8116 	bne.w	800135e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b12      	cmp	r3, #18
 8001138:	d034      	beq.n	80011a4 <HAL_GPIO_Init+0xa4>
 800113a:	2b12      	cmp	r3, #18
 800113c:	d80d      	bhi.n	800115a <HAL_GPIO_Init+0x5a>
 800113e:	2b02      	cmp	r3, #2
 8001140:	d02b      	beq.n	800119a <HAL_GPIO_Init+0x9a>
 8001142:	2b02      	cmp	r3, #2
 8001144:	d804      	bhi.n	8001150 <HAL_GPIO_Init+0x50>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d01c      	beq.n	8001188 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800114e:	e048      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001150:	2b03      	cmp	r3, #3
 8001152:	d043      	beq.n	80011dc <HAL_GPIO_Init+0xdc>
 8001154:	2b11      	cmp	r3, #17
 8001156:	d01b      	beq.n	8001190 <HAL_GPIO_Init+0x90>
          break;
 8001158:	e043      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800115a:	4a89      	ldr	r2, [pc, #548]	; (8001380 <HAL_GPIO_Init+0x280>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d026      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 8001160:	4a87      	ldr	r2, [pc, #540]	; (8001380 <HAL_GPIO_Init+0x280>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d806      	bhi.n	8001174 <HAL_GPIO_Init+0x74>
 8001166:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_GPIO_Init+0x284>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d020      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800116c:	4a86      	ldr	r2, [pc, #536]	; (8001388 <HAL_GPIO_Init+0x288>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d01d      	beq.n	80011ae <HAL_GPIO_Init+0xae>
          break;
 8001172:	e036      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001174:	4a85      	ldr	r2, [pc, #532]	; (800138c <HAL_GPIO_Init+0x28c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d019      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 800117a:	4a85      	ldr	r2, [pc, #532]	; (8001390 <HAL_GPIO_Init+0x290>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d016      	beq.n	80011ae <HAL_GPIO_Init+0xae>
 8001180:	4a84      	ldr	r2, [pc, #528]	; (8001394 <HAL_GPIO_Init+0x294>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0xae>
          break;
 8001186:	e02c      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e028      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	3304      	adds	r3, #4
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e023      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	3308      	adds	r3, #8
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e01e      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	330c      	adds	r3, #12
 80011aa:	623b      	str	r3, [r7, #32]
          break;
 80011ac:	e019      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011b6:	2304      	movs	r3, #4
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e012      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c4:	2308      	movs	r3, #8
 80011c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	611a      	str	r2, [r3, #16]
          break;
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011d0:	2308      	movs	r3, #8
 80011d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	615a      	str	r2, [r3, #20]
          break;
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d801      	bhi.n	80011ec <HAL_GPIO_Init+0xec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e001      	b.n	80011f0 <HAL_GPIO_Init+0xf0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2bff      	cmp	r3, #255	; 0xff
 80011f6:	d802      	bhi.n	80011fe <HAL_GPIO_Init+0xfe>
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x104>
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3b08      	subs	r3, #8
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	210f      	movs	r1, #15
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	6a39      	ldr	r1, [r7, #32]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	431a      	orrs	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 8096 	beq.w	800135e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_GPIO_Init+0x298>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800124a:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_GPIO_Init+0x29c>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x19e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x2a4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x19a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2a8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x196>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2ac>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x192>
 800128e:	2303      	movs	r3, #3
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 8001292:	2304      	movs	r3, #4
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x1a0>
 800129e:	2300      	movs	r3, #0
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012b0:	493a      	ldr	r1, [pc, #232]	; (800139c <HAL_GPIO_Init+0x29c>)
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4938      	ldr	r1, [pc, #224]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	43db      	mvns	r3, r3
 80012e0:	4933      	ldr	r1, [pc, #204]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	492e      	ldr	r1, [pc, #184]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4929      	ldr	r1, [pc, #164]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800130a:	4013      	ands	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	4924      	ldr	r1, [pc, #144]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
 8001326:	e006      	b.n	8001336 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	491f      	ldr	r1, [pc, #124]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001332:	4013      	ands	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	491a      	ldr	r1, [pc, #104]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	60cb      	str	r3, [r1, #12]
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	43db      	mvns	r3, r3
 8001358:	4915      	ldr	r1, [pc, #84]	; (80013b0 <HAL_GPIO_Init+0x2b0>)
 800135a:	4013      	ands	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	3301      	adds	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f47f aed0 	bne.w	8001114 <HAL_GPIO_Init+0x14>
  }
}
 8001374:	bf00      	nop
 8001376:	372c      	adds	r7, #44	; 0x2c
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	10210000 	.word	0x10210000
 8001384:	10110000 	.word	0x10110000
 8001388:	10120000 	.word	0x10120000
 800138c:	10310000 	.word	0x10310000
 8001390:	10320000 	.word	0x10320000
 8001394:	10220000 	.word	0x10220000
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40011400 	.word	0x40011400
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e11f      	b.n	8001606 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fc6c 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001418:	f001 fb90 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a7b      	ldr	r2, [pc, #492]	; (8001610 <HAL_I2C_Init+0x25c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d807      	bhi.n	8001438 <HAL_I2C_Init+0x84>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a7a      	ldr	r2, [pc, #488]	; (8001614 <HAL_I2C_Init+0x260>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e006      	b.n	8001446 <HAL_I2C_Init+0x92>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_I2C_Init+0x264>)
 800143c:	4293      	cmp	r3, r2
 800143e:	bf94      	ite	ls
 8001440:	2301      	movls	r3, #1
 8001442:	2300      	movhi	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0db      	b.n	8001606 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_I2C_Init+0x268>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a64      	ldr	r2, [pc, #400]	; (8001610 <HAL_I2C_Init+0x25c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d802      	bhi.n	8001488 <HAL_I2C_Init+0xd4>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	e009      	b.n	800149c <HAL_I2C_Init+0xe8>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a63      	ldr	r2, [pc, #396]	; (8001620 <HAL_I2C_Init+0x26c>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	3301      	adds	r3, #1
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4956      	ldr	r1, [pc, #344]	; (8001610 <HAL_I2C_Init+0x25c>)
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d80d      	bhi.n	80014d8 <HAL_I2C_Init+0x124>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e59      	subs	r1, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	bf38      	it	cc
 80014d4:	2304      	movcc	r3, #4
 80014d6:	e04f      	b.n	8001578 <HAL_I2C_Init+0x1c4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <HAL_I2C_Init+0x150>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1e58      	subs	r0, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	e012      	b.n	800152a <HAL_I2C_Init+0x176>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	0099      	lsls	r1, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	fbb0 f3f3 	udiv	r3, r0, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Init+0x17e>
 800152e:	2301      	movs	r3, #1
 8001530:	e022      	b.n	8001578 <HAL_I2C_Init+0x1c4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10e      	bne.n	8001558 <HAL_I2C_Init+0x1a4>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1e58      	subs	r0, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	440b      	add	r3, r1
 8001548:	fbb0 f3f3 	udiv	r3, r0, r3
 800154c:	3301      	adds	r3, #1
 800154e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001556:	e00f      	b.n	8001578 <HAL_I2C_Init+0x1c4>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	0099      	lsls	r1, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	fbb0 f3f3 	udiv	r3, r0, r3
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	6809      	ldr	r1, [r1, #0]
 800157c:	4313      	orrs	r3, r2
 800157e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6911      	ldr	r1, [r2, #16]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68d2      	ldr	r2, [r2, #12]
 80015b2:	4311      	orrs	r1, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	000186a0 	.word	0x000186a0
 8001614:	001e847f 	.word	0x001e847f
 8001618:	003d08ff 	.word	0x003d08ff
 800161c:	431bde83 	.word	0x431bde83
 8001620:	10624dd3 	.word	0x10624dd3

08001624 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	4608      	mov	r0, r1
 800162e:	4611      	mov	r1, r2
 8001630:	461a      	mov	r2, r3
 8001632:	4603      	mov	r3, r0
 8001634:	817b      	strh	r3, [r7, #10]
 8001636:	460b      	mov	r3, r1
 8001638:	813b      	strh	r3, [r7, #8]
 800163a:	4613      	mov	r3, r2
 800163c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800163e:	f7ff fc71 	bl	8000f24 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b20      	cmp	r3, #32
 800164e:	f040 80d9 	bne.w	8001804 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2319      	movs	r3, #25
 8001658:	2201      	movs	r2, #1
 800165a:	496d      	ldr	r1, [pc, #436]	; (8001810 <HAL_I2C_Mem_Write+0x1ec>)
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fcbb 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001668:	2302      	movs	r3, #2
 800166a:	e0cc      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_I2C_Mem_Write+0x56>
 8001676:	2302      	movs	r3, #2
 8001678:	e0c5      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d007      	beq.n	80016a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2221      	movs	r2, #33	; 0x21
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_I2C_Mem_Write+0x1f0>)
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016e2:	88f8      	ldrh	r0, [r7, #6]
 80016e4:	893a      	ldrh	r2, [r7, #8]
 80016e6:	8979      	ldrh	r1, [r7, #10]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4603      	mov	r3, r0
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 faf2 	bl	8001cdc <I2C_RequestMemoryWrite>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d052      	beq.n	80017a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e081      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fd3c 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b04      	cmp	r3, #4
 8001718:	d107      	bne.n	800172a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06b      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d11b      	bne.n	80017a4 <HAL_I2C_Mem_Write+0x180>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	d017      	beq.n	80017a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	3b01      	subs	r3, #1
 8001790:	b29a      	uxth	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1aa      	bne.n	8001702 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 fd28 	bl	8002206 <I2C_WaitOnBTFFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d107      	bne.n	80017d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e016      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	00100002 	.word	0x00100002
 8001814:	ffff0000 	.word	0xffff0000

08001818 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	817b      	strh	r3, [r7, #10]
 800182a:	460b      	mov	r3, r1
 800182c:	813b      	strh	r3, [r7, #8]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001836:	f7ff fb75 	bl	8000f24 <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b20      	cmp	r3, #32
 8001846:	f040 823d 	bne.w	8001cc4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2319      	movs	r3, #25
 8001850:	2201      	movs	r2, #1
 8001852:	4981      	ldr	r1, [pc, #516]	; (8001a58 <HAL_I2C_Mem_Read+0x240>)
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fbbf 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	e230      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Mem_Read+0x5a>
 800186e:	2302      	movs	r3, #2
 8001870:	e229      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d007      	beq.n	8001898 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2222      	movs	r2, #34	; 0x22
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a61      	ldr	r2, [pc, #388]	; (8001a5c <HAL_I2C_Mem_Read+0x244>)
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018da:	88f8      	ldrh	r0, [r7, #6]
 80018dc:	893a      	ldrh	r2, [r7, #8]
 80018de:	8979      	ldrh	r1, [r7, #10]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4603      	mov	r3, r0
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 fa8c 	bl	8001e08 <I2C_RequestMemoryRead>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1e5      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d113      	bne.n	800192a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e1b9      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	2b01      	cmp	r3, #1
 8001930:	d11d      	bne.n	800196e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800196a:	b662      	cpsie	i
 800196c:	e197      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001972:	2b02      	cmp	r3, #2
 8001974:	d11d      	bne.n	80019b2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001986:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
 80019b0:	e175      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80019d8:	e161      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f200 811a 	bhi.w	8001c18 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d123      	bne.n	8001a34 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fc49 	bl	8002288 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e162      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a32:	e134      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d150      	bne.n	8001ade <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	2200      	movs	r2, #0
 8001a44:	4906      	ldr	r1, [pc, #24]	; (8001a60 <HAL_I2C_Mem_Read+0x248>)
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fac6 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e137      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
 8001a56:	bf00      	nop
 8001a58:	00100002 	.word	0x00100002
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001aa8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001adc:	e0df      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	497a      	ldr	r1, [pc, #488]	; (8001cd0 <HAL_I2C_Mem_Read+0x4b8>)
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fa75 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0e6      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_I2C_Mem_Read+0x4bc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_I2C_Mem_Read+0x4c0>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0a1a      	lsrs	r2, r3, #8
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00da      	lsls	r2, r3, #3
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d117      	bne.n	8001b92 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001b84:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e099      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d1da      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c16:	e042      	b.n	8001c9e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fb33 	bl	8002288 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e04c      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d118      	bne.n	8001c9e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f47f ae99 	bne.w	80019da <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	00010004 	.word	0x00010004
 8001cd4:	2000002c 	.word	0x2000002c
 8001cd8:	14f8b589 	.word	0x14f8b589

08001cdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f960 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00d      	beq.n	8001d3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d103      	bne.n	8001d36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e05f      	b.n	8001dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	492d      	ldr	r1, [pc, #180]	; (8001e04 <I2C_RequestMemoryWrite+0x128>)
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f998 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04c      	b.n	8001dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	6a39      	ldr	r1, [r7, #32]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa02 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d107      	bne.n	8001d9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e02b      	b.n	8001dfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	e021      	b.n	8001df8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001db4:	893b      	ldrh	r3, [r7, #8]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	6a39      	ldr	r1, [r7, #32]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f9dc 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d107      	bne.n	8001dea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e005      	b.n	8001dfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	00010002 	.word	0x00010002

08001e08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4603      	mov	r3, r0
 8001e18:	817b      	strh	r3, [r7, #10]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	813b      	strh	r3, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f8c2 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e68:	d103      	bne.n	8001e72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0aa      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	4952      	ldr	r1, [pc, #328]	; (8001fd4 <I2C_RequestMemoryRead+0x1cc>)
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f8fa 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e097      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	6a39      	ldr	r1, [r7, #32]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f964 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d107      	bne.n	8001eda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e076      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee4:	893b      	ldrh	r3, [r7, #8]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	e021      	b.n	8001f34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ef0:	893b      	ldrh	r3, [r7, #8]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f93e 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d107      	bne.n	8001f26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e050      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f36:	6a39      	ldr	r1, [r7, #32]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f923 	bl	8002184 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d107      	bne.n	8001f5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e035      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f82b 	bl	8001fd8 <I2C_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f96:	d103      	bne.n	8001fa0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e013      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fa4:	897b      	ldrh	r3, [r7, #10]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	6a3a      	ldr	r2, [r7, #32]
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <I2C_RequestMemoryRead+0x1cc>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f863 	bl	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	00010002 	.word	0x00010002

08001fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fe8:	e025      	b.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d021      	beq.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff2:	f7fe ff97 	bl	8000f24 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d116      	bne.n	8002036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e023      	b.n	800207e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0c1b      	lsrs	r3, r3, #16
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d10d      	bne.n	800205c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4013      	ands	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	e00c      	b.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	429a      	cmp	r2, r3
 800207a:	d0b6      	beq.n	8001fea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002094:	e051      	b.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d123      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f043 0204 	orr.w	r2, r3, #4
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e046      	b.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d021      	beq.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7fe ff15 	bl	8000f24 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d116      	bne.n	800213a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e020      	b.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10c      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e00b      	b.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	43da      	mvns	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d18d      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002190:	e02d      	b.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f8ce 	bl	8002334 <I2C_IsAcknowledgeFailed>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02d      	b.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d021      	beq.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe febb 	bl	8000f24 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d116      	bne.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e007      	b.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d1ca      	bne.n	8002192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002212:	e02d      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f88d 	bl	8002334 <I2C_IsAcknowledgeFailed>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e02d      	b.n	8002280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d021      	beq.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7fe fe7a 	bl	8000f24 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d1ca      	bne.n	8002214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002294:	e042      	b.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d119      	bne.n	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0210 	mvn.w	r2, #16
 80022ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e029      	b.n	800232c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d8:	f7fe fe24 	bl	8000f24 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d302      	bcc.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d1b5      	bne.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234a:	d11b      	bne.n	8002384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e26c      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	4b92      	ldr	r3, [pc, #584]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023bc:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d112      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
 80023c8:	4b8c      	ldr	r3, [pc, #560]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06c      	beq.n	80024bc <HAL_RCC_OscConfig+0x12c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d168      	bne.n	80024bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e246      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x76>
 80023f8:	4b80      	ldr	r3, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a7f      	ldr	r2, [pc, #508]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e02e      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x98>
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b78      	ldr	r3, [pc, #480]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a77      	ldr	r2, [pc, #476]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xbc>
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a71      	ldr	r2, [pc, #452]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6e      	ldr	r2, [pc, #440]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xd4>
 800244c:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b68      	ldr	r3, [pc, #416]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a67      	ldr	r2, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fd5a 	bl	8000f24 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fd56 	bl	8000f24 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1fa      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xe4>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fd46 	bl	8000f24 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fd42 	bl	8000f24 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1e6      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x10c>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d063      	beq.n	8002592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1ba      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4939      	ldr	r1, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e03a      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <HAL_RCC_OscConfig+0x270>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fcfb 	bl	8000f24 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe fcf7 	bl	8000f24 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e19b      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4927      	ldr	r1, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_RCC_OscConfig+0x270>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fcda 	bl	8000f24 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe fcd6 	bl	8000f24 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e17a      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03a      	beq.n	8002614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fcba 	bl	8000f24 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7fe fcb6 	bl	8000f24 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e15a      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_OscConfig+0x26c>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f000 fada 	bl	8002b8c <RCC_Delay>
 80025d8:	e01c      	b.n	8002614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fca0 	bl	8000f24 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe fc9c 	bl	8000f24 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e140      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	42420000 	.word	0x42420000
 8002604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e9      	bne.n	80025e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80a6 	beq.w	800276e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b97      	ldr	r3, [pc, #604]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b94      	ldr	r3, [pc, #592]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a93      	ldr	r2, [pc, #588]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b91      	ldr	r3, [pc, #580]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a8a      	ldr	r2, [pc, #552]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe fc5d 	bl	8000f24 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7fe fc59 	bl	8000f24 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0fd      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x4f8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x312>
 8002694:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e02d      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x334>
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a75      	ldr	r2, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x356>
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a6c      	ldr	r2, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x36e>
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a63      	ldr	r2, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fc0d 	bl	8000f24 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fc09 	bl	8000f24 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0ab      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b57      	ldr	r3, [pc, #348]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x37e>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7fe fbf7 	bl	8000f24 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fbf3 	bl	8000f24 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e095      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b48      	ldr	r3, [pc, #288]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a47      	ldr	r2, [pc, #284]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 8081 	beq.w	800287a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d061      	beq.n	8002848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d146      	bne.n	800281a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fbc7 	bl	8000f24 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fbc3 	bl	8000f24 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e067      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	4b35      	ldr	r3, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	492d      	ldr	r1, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a19      	ldr	r1, [r3, #32]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fb97 	bl	8000f24 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fb93 	bl	8000f24 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e037      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x46a>
 8002818:	e02f      	b.n	800287a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RCC_OscConfig+0x4fc>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fb80 	bl	8000f24 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fb7c 	bl	8000f24 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e020      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x498>
 8002846:	e018      	b.n	800287a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e013      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	42420060 	.word	0x42420060

08002890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7fe fad0 	bl	8000f24 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe facc 	bl	8000f24 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	fa21 f303 	lsr.w	r3, r1, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1cc>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fa2e 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	0800305c 	.word	0x0800305c
 8002a5c:	2000002c 	.word	0x2000002c
 8002a60:	20000030 	.word	0x20000030

08002a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b490      	push	{r4, r7}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a6c:	1d3c      	adds	r4, r7, #4
 8002a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a74:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x46>
 8002aa2:	e02d      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aa6:	623b      	str	r3, [r7, #32]
      break;
 8002aa8:	e02d      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002abc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	0c5b      	lsrs	r3, r3, #17
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002adc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ae2:	fb02 f203 	mul.w	r2, r2, r3
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	e004      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	623b      	str	r3, [r7, #32]
      break;
 8002afe:	e002      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b02:	623b      	str	r3, [r7, #32]
      break;
 8002b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc90      	pop	{r4, r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	08003048 	.word	0x08003048
 8002b18:	08003058 	.word	0x08003058
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	007a1200 	.word	0x007a1200
 8002b24:	003d0900 	.word	0x003d0900

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	2000002c 	.word	0x2000002c

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff2 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b44:	4601      	mov	r1, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	0800306c 	.word	0x0800306c

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffde 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4601      	mov	r1, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	0adb      	lsrs	r3, r3, #11
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	0800306c 	.word	0x0800306c

08002b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCC_Delay+0x34>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <RCC_Delay+0x38>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a5b      	lsrs	r3, r3, #9
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba8:	bf00      	nop
  }
  while (Delay --);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	60fa      	str	r2, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <RCC_Delay+0x1c>
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	2000002c 	.word	0x2000002c
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e03f      	b.n	8002c5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f8a0 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f905 	bl	8002e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b08a      	sub	sp, #40	; 0x28
 8002c66:	af02      	add	r7, sp, #8
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d17c      	bne.n	8002d7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_UART_Transmit+0x2c>
 8002c88:	88fb      	ldrh	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e075      	b.n	8002d7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x3e>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e06e      	b.n	8002d7e <HAL_UART_Transmit+0x11c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	; 0x21
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe f935 	bl	8000f24 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_UART_Transmit+0x82>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e003      	b.n	8002cec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cf4:	e02a      	b.n	8002d4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f840 	bl	8002d86 <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e036      	b.n	8002d7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	e007      	b.n	8002d3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1cf      	bne.n	8002cf6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2140      	movs	r1, #64	; 0x40
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f810 	bl	8002d86 <UART_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e006      	b.n	8002d7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3720      	adds	r7, #32
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d96:	e02c      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d028      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002da6:	f7fe f8bd 	bl	8000f24 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d21d      	bcs.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e00f      	b.n	8002e12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0c3      	beq.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e56:	f023 030c 	bic.w	r3, r3, #12
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	; (8002f30 <UART_SetConfig+0x114>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e84:	f7ff fe6e 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	e002      	b.n	8002e92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7ff fe56 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8002e90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <UART_SetConfig+0x118>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	0119      	lsls	r1, r3, #4
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	009a      	lsls	r2, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <UART_SetConfig+0x118>)
 8002eca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2064      	movs	r0, #100	; 0x64
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	3332      	adds	r3, #50	; 0x32
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <UART_SetConfig+0x118>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee8:	4419      	add	r1, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009a      	lsls	r2, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <UART_SetConfig+0x118>)
 8002f02:	fba3 0302 	umull	r0, r3, r3, r2
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2064      	movs	r0, #100	; 0x64
 8002f0a:	fb00 f303 	mul.w	r3, r0, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	3332      	adds	r3, #50	; 0x32
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <UART_SetConfig+0x118>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	440a      	add	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40013800 	.word	0x40013800
 8002f34:	51eb851f 	.word	0x51eb851f

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	4e0c      	ldr	r6, [pc, #48]	; (8002f70 <__libc_init_array+0x38>)
 8002f3e:	4c0d      	ldr	r4, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f40:	1ba4      	subs	r4, r4, r6
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	42a5      	cmp	r5, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	f000 f822 	bl	8002f90 <_init>
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	4e0a      	ldr	r6, [pc, #40]	; (8002f78 <__libc_init_array+0x40>)
 8002f50:	4c0a      	ldr	r4, [pc, #40]	; (8002f7c <__libc_init_array+0x44>)
 8002f52:	1ba4      	subs	r4, r4, r6
 8002f54:	10a4      	asrs	r4, r4, #2
 8002f56:	42a5      	cmp	r5, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f60:	4798      	blx	r3
 8002f62:	3501      	adds	r5, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6a:	4798      	blx	r3
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08003074 	.word	0x08003074
 8002f74:	08003074 	.word	0x08003074
 8002f78:	08003074 	.word	0x08003074
 8002f7c:	08003078 	.word	0x08003078

08002f80 <memset>:
 8002f80:	4603      	mov	r3, r0
 8002f82:	4402      	add	r2, r0
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d100      	bne.n	8002f8a <memset+0xa>
 8002f88:	4770      	bx	lr
 8002f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8e:	e7f9      	b.n	8002f84 <memset+0x4>

08002f90 <_init>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr

08002f9c <_fini>:
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9e:	bf00      	nop
 8002fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa2:	bc08      	pop	{r3}
 8002fa4:	469e      	mov	lr, r3
 8002fa6:	4770      	bx	lr
