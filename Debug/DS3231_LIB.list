
DS3231_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002d84  08002d84  00012d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e50  08002e50  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002e50  08002e50  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e50  08002e50  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000038  08002e90  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002e90  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a589  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001819  00000000  00000000  0002a5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002be08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174e3  00000000  00000000  0002cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e51  00000000  00000000  000444cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084844  00000000  00000000  0004c31c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  000d0bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d6c 	.word	0x08002d6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002d6c 	.word	0x08002d6c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <time_write>:
 *
 */


void time_write(int hr,int min,int sec,int format)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	; 0x28
 8000160:	af04      	add	r7, sp, #16
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[3];
	uint16_t Devaddress=(Dev<<1);
 800016a:	4b2a      	ldr	r3, [pc, #168]	; (8000214 <time_write+0xb8>)
 800016c:	881b      	ldrh	r3, [r3, #0]
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	82fb      	strh	r3, [r7, #22]
	MemAddress=0x00;
 8000172:	2300      	movs	r3, #0
 8000174:	757b      	strb	r3, [r7, #21]

	//pata[2]=integer_to_bcd(hr);

	if(format==HR_FORMAT_24)
 8000176:	683b      	ldr	r3, [r7, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d106      	bne.n	800018a <time_write+0x2e>
	pata[2]=integer_to_bcd(hr);
 800017c:	68f8      	ldr	r0, [r7, #12]
 800017e:	f000 fb0b 	bl	8000798 <integer_to_bcd>
 8000182:	4603      	mov	r3, r0
 8000184:	b2db      	uxtb	r3, r3
 8000186:	74bb      	strb	r3, [r7, #18]
 8000188:	e024      	b.n	80001d4 <time_write+0x78>
	else
	{
	pata[2]=integer_to_bcd(hr)|(1<<6);
 800018a:	68f8      	ldr	r0, [r7, #12]
 800018c:	f000 fb04 	bl	8000798 <integer_to_bcd>
 8000190:	4603      	mov	r3, r0
 8000192:	b25b      	sxtb	r3, r3
 8000194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000198:	b25b      	sxtb	r3, r3
 800019a:	b2db      	uxtb	r3, r3
 800019c:	74bb      	strb	r3, [r7, #18]
	if(format==HR_FORMAT_12_PM)
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d10a      	bne.n	80001ba <time_write+0x5e>
		pata[2]=integer_to_bcd(hr)|(1<<6)|(1<<5);
 80001a4:	68f8      	ldr	r0, [r7, #12]
 80001a6:	f000 faf7 	bl	8000798 <integer_to_bcd>
 80001aa:	4603      	mov	r3, r0
 80001ac:	b25b      	sxtb	r3, r3
 80001ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	74bb      	strb	r3, [r7, #18]
 80001b8:	e00c      	b.n	80001d4 <time_write+0x78>
	else if(format==HR_FORMAT_12_AM)
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d109      	bne.n	80001d4 <time_write+0x78>
		pata[2]=integer_to_bcd(hr)|(1<<6);
 80001c0:	68f8      	ldr	r0, [r7, #12]
 80001c2:	f000 fae9 	bl	8000798 <integer_to_bcd>
 80001c6:	4603      	mov	r3, r0
 80001c8:	b25b      	sxtb	r3, r3
 80001ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ce:	b25b      	sxtb	r3, r3
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	74bb      	strb	r3, [r7, #18]
	}

	pata[1]=integer_to_bcd(min);
 80001d4:	68b8      	ldr	r0, [r7, #8]
 80001d6:	f000 fadf 	bl	8000798 <integer_to_bcd>
 80001da:	4603      	mov	r3, r0
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	747b      	strb	r3, [r7, #17]
	pata[0]=integer_to_bcd(sec);
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f000 fad9 	bl	8000798 <integer_to_bcd>
 80001e6:	4603      	mov	r3, r0
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	743b      	strb	r3, [r7, #16]



	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,3,1000);
 80001ec:	7d7b      	ldrb	r3, [r7, #21]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	8af9      	ldrh	r1, [r7, #22]
 80001f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f6:	9302      	str	r3, [sp, #8]
 80001f8:	2303      	movs	r3, #3
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <time_write+0xbc>)
 8000206:	f001 f8fb 	bl	8001400 <HAL_I2C_Mem_Write>


}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028
 8000218:	20000054 	.word	0x20000054

0800021c <date_write>:




void date_write(int day,int date,int month,int year)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	; 0x28
 8000220:	af04      	add	r7, sp, #16
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[4];
	uint16_t Devaddress=(Dev<<1);
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <date_write+0x70>)
 800022c:	881b      	ldrh	r3, [r3, #0]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	82fb      	strh	r3, [r7, #22]
	MemAddress=0x03;
 8000232:	2303      	movs	r3, #3
 8000234:	757b      	strb	r3, [r7, #21]
	pata[0]=integer_to_bcd(day);
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f000 faae 	bl	8000798 <integer_to_bcd>
 800023c:	4603      	mov	r3, r0
 800023e:	b2db      	uxtb	r3, r3
 8000240:	743b      	strb	r3, [r7, #16]
	pata[1]=integer_to_bcd(date);
 8000242:	68b8      	ldr	r0, [r7, #8]
 8000244:	f000 faa8 	bl	8000798 <integer_to_bcd>
 8000248:	4603      	mov	r3, r0
 800024a:	b2db      	uxtb	r3, r3
 800024c:	747b      	strb	r3, [r7, #17]
	pata[2]=integer_to_bcd(month);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 faa2 	bl	8000798 <integer_to_bcd>
 8000254:	4603      	mov	r3, r0
 8000256:	b2db      	uxtb	r3, r3
 8000258:	74bb      	strb	r3, [r7, #18]
	pata[3]=integer_to_bcd(year);
 800025a:	6838      	ldr	r0, [r7, #0]
 800025c:	f000 fa9c 	bl	8000798 <integer_to_bcd>
 8000260:	4603      	mov	r3, r0
 8000262:	b2db      	uxtb	r3, r3
 8000264:	74fb      	strb	r3, [r7, #19]



	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,4,1000);
 8000266:	7d7b      	ldrb	r3, [r7, #21]
 8000268:	b29a      	uxth	r2, r3
 800026a:	8af9      	ldrh	r1, [r7, #22]
 800026c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000270:	9302      	str	r3, [sp, #8]
 8000272:	2304      	movs	r3, #4
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	f107 0310 	add.w	r3, r7, #16
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2301      	movs	r3, #1
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <date_write+0x74>)
 8000280:	f001 f8be 	bl	8001400 <HAL_I2C_Mem_Write>


}
 8000284:	bf00      	nop
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	20000054 	.word	0x20000054

08000294 <read_time>:
 *
 *
 */

void read_time()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b08a      	sub	sp, #40	; 0x28
 8000298:	af04      	add	r7, sp, #16
	uint8_t MemAddress=TIME;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]

	uint16_t Devaddress=(Dev<<1);
 800029e:	4b39      	ldr	r3, [pc, #228]	; (8000384 <read_time+0xf0>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	813b      	strh	r3, [r7, #8]
	 // HAL_I2C_Master_Transmit(&hi2c1,Devaddress, pData,2,1000);

	  uint8_t data[5];
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,3,1000);
 80002a6:	7afb      	ldrb	r3, [r7, #11]
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	8939      	ldrh	r1, [r7, #8]
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	2303      	movs	r3, #3
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	463b      	mov	r3, r7
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2301      	movs	r3, #1
 80002bc:	4832      	ldr	r0, [pc, #200]	; (8000388 <read_time+0xf4>)
 80002be:	f001 f999 	bl	80015f4 <HAL_I2C_Mem_Read>
uint8_t second=data[0];
 80002c2:	783b      	ldrb	r3, [r7, #0]
 80002c4:	71fb      	strb	r3, [r7, #7]
uint8_t minute=data[1];
 80002c6:	787b      	ldrb	r3, [r7, #1]
 80002c8:	71bb      	strb	r3, [r7, #6]
uint8_t hour=data[2];
 80002ca:	78bb      	ldrb	r3, [r7, #2]
 80002cc:	75fb      	strb	r3, [r7, #23]
char *hour_format="";
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <read_time+0xf8>)
 80002d0:	613b      	str	r3, [r7, #16]
int hr1=0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
//if 6th bit is  set which means it follows 12 hour format check 5th bit to know AM /PM
if((hour & (1<<6))!=0)
 80002d6:	7dfb      	ldrb	r3, [r7, #23]
 80002d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00f      	beq.n	8000300 <read_time+0x6c>
{
hr1=1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
if((hour & (1<<5))!=0)
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	f003 0320 	and.w	r3, r3, #32
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d006      	beq.n	80002fc <read_time+0x68>
{hour_format="PM";
 80002ee:	4b28      	ldr	r3, [pc, #160]	; (8000390 <read_time+0xfc>)
 80002f0:	613b      	str	r3, [r7, #16]
hour &=~(1<<5);
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	f023 0320 	bic.w	r3, r3, #32
 80002f8:	75fb      	strb	r3, [r7, #23]
 80002fa:	e001      	b.n	8000300 <read_time+0x6c>
}
else
	hour_format="AM";
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <read_time+0x100>)
 80002fe:	613b      	str	r3, [r7, #16]


}
//else it follows 24 hpour format

hour &=~(1<<6);
 8000300:	7dfb      	ldrb	r3, [r7, #23]
 8000302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000306:	75fb      	strb	r3, [r7, #23]


hour=bcd_to_integer(hour);
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fa6a 	bl	80007e4 <bcd_to_integer>
 8000310:	4603      	mov	r3, r0
 8000312:	75fb      	strb	r3, [r7, #23]
minute=bcd_to_integer(minute);
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fa64 	bl	80007e4 <bcd_to_integer>
 800031c:	4603      	mov	r3, r0
 800031e:	71bb      	strb	r3, [r7, #6]
second=bcd_to_integer(second);
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fa5e 	bl	80007e4 <bcd_to_integer>
 8000328:	4603      	mov	r3, r0
 800032a:	71fb      	strb	r3, [r7, #7]
print(int_to_char(hour));
 800032c:	7dfb      	ldrb	r3, [r7, #23]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f9a8 	bl	8000684 <int_to_char>
 8000334:	4603      	mov	r3, r0
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f98e 	bl	8000658 <print>
print("-hour");
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <read_time+0x104>)
 800033e:	f000 f98b 	bl	8000658 <print>
print(int_to_char(minute));
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f99d 	bl	8000684 <int_to_char>
 800034a:	4603      	mov	r3, r0
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f983 	bl	8000658 <print>
print("-minute");
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <read_time+0x108>)
 8000354:	f000 f980 	bl	8000658 <print>
print(int_to_char(second));
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f992 	bl	8000684 <int_to_char>
 8000360:	4603      	mov	r3, r0
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f978 	bl	8000658 <print>
print("-second");
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <read_time+0x10c>)
 800036a:	f000 f975 	bl	8000658 <print>
if(hr1==1)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d102      	bne.n	800037a <read_time+0xe6>
print(hour_format);
 8000374:	6938      	ldr	r0, [r7, #16]
 8000376:	f000 f96f 	bl	8000658 <print>


}
 800037a:	bf00      	nop
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	20000054 	.word	0x20000054
 800038c:	08002d84 	.word	0x08002d84
 8000390:	08002dcc 	.word	0x08002dcc
 8000394:	08002dd0 	.word	0x08002dd0
 8000398:	08002dd4 	.word	0x08002dd4
 800039c:	08002ddc 	.word	0x08002ddc
 80003a0:	08002de4 	.word	0x08002de4

080003a4 <read_date>:

void read_date()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af04      	add	r7, sp, #16
	uint8_t MemAddress=DATE;
 80003aa:	2303      	movs	r3, #3
 80003ac:	75fb      	strb	r3, [r7, #23]

	uint16_t Devaddress=(Dev<<1);
 80003ae:	4b33      	ldr	r3, [pc, #204]	; (800047c <read_date+0xd8>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	82bb      	strh	r3, [r7, #20]
	 // HAL_I2C_Master_Transmit(&hi2c1,Devaddress, pData,2,1000);

	  uint8_t data[5];
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,4,1000);
 80003b6:	7dfb      	ldrb	r3, [r7, #23]
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	8ab9      	ldrh	r1, [r7, #20]
 80003bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	2304      	movs	r3, #4
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	482c      	ldr	r0, [pc, #176]	; (8000480 <read_date+0xdc>)
 80003ce:	f001 f911 	bl	80015f4 <HAL_I2C_Mem_Read>
uint8_t day=data[0];
 80003d2:	793b      	ldrb	r3, [r7, #4]
 80003d4:	74fb      	strb	r3, [r7, #19]
uint8_t date=data[1];
 80003d6:	797b      	ldrb	r3, [r7, #5]
 80003d8:	74bb      	strb	r3, [r7, #18]
uint8_t month=data[2];
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	747b      	strb	r3, [r7, #17]
uint8_t year=data[3];
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	743b      	strb	r3, [r7, #16]
char *year_format="";
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <read_date+0xe0>)
 80003e4:	60fb      	str	r3, [r7, #12]

month&=~(1<<7);
 80003e6:	7c7b      	ldrb	r3, [r7, #17]
 80003e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ec:	747b      	strb	r3, [r7, #17]

year=bcd_to_integer(year);
 80003ee:	7c3b      	ldrb	r3, [r7, #16]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f9f7 	bl	80007e4 <bcd_to_integer>
 80003f6:	4603      	mov	r3, r0
 80003f8:	743b      	strb	r3, [r7, #16]
month=bcd_to_integer(month);
 80003fa:	7c7b      	ldrb	r3, [r7, #17]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f9f1 	bl	80007e4 <bcd_to_integer>
 8000402:	4603      	mov	r3, r0
 8000404:	747b      	strb	r3, [r7, #17]
date=bcd_to_integer(date);
 8000406:	7cbb      	ldrb	r3, [r7, #18]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f9eb 	bl	80007e4 <bcd_to_integer>
 800040e:	4603      	mov	r3, r0
 8000410:	74bb      	strb	r3, [r7, #18]
print("****************");
 8000412:	481d      	ldr	r0, [pc, #116]	; (8000488 <read_date+0xe4>)
 8000414:	f000 f920 	bl	8000658 <print>
print(int_to_char(year));
 8000418:	7c3b      	ldrb	r3, [r7, #16]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f932 	bl	8000684 <int_to_char>
 8000420:	4603      	mov	r3, r0
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f918 	bl	8000658 <print>
print("-year");
 8000428:	4818      	ldr	r0, [pc, #96]	; (800048c <read_date+0xe8>)
 800042a:	f000 f915 	bl	8000658 <print>
print(int_to_char(month));
 800042e:	7c7b      	ldrb	r3, [r7, #17]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f927 	bl	8000684 <int_to_char>
 8000436:	4603      	mov	r3, r0
 8000438:	4618      	mov	r0, r3
 800043a:	f000 f90d 	bl	8000658 <print>
print("-month");
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <read_date+0xec>)
 8000440:	f000 f90a 	bl	8000658 <print>
print(int_to_char(date));
 8000444:	7cbb      	ldrb	r3, [r7, #18]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f91c 	bl	8000684 <int_to_char>
 800044c:	4603      	mov	r3, r0
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f902 	bl	8000658 <print>
print("-date");
 8000454:	480f      	ldr	r0, [pc, #60]	; (8000494 <read_date+0xf0>)
 8000456:	f000 f8ff 	bl	8000658 <print>
print("day-");
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <read_date+0xf4>)
 800045c:	f000 f8fc 	bl	8000658 <print>
print(weekday[day]);
 8000460:	7cfb      	ldrb	r3, [r7, #19]
 8000462:	4a0e      	ldr	r2, [pc, #56]	; (800049c <read_date+0xf8>)
 8000464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f8f5 	bl	8000658 <print>
print("****************");
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <read_date+0xe4>)
 8000470:	f000 f8f2 	bl	8000658 <print>


}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000028 	.word	0x20000028
 8000480:	20000054 	.word	0x20000054
 8000484:	08002d84 	.word	0x08002d84
 8000488:	08002dec 	.word	0x08002dec
 800048c:	08002e00 	.word	0x08002e00
 8000490:	08002e08 	.word	0x08002e08
 8000494:	08002e10 	.word	0x08002e10
 8000498:	08002e18 	.word	0x08002e18
 800049c:	20000000 	.word	0x20000000

080004a0 <alarm_write>:
 *
 */


void alarm_write(int hr,int min,int sec,int format,int day,int date,int mode)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af04      	add	r7, sp, #16
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	603b      	str	r3, [r7, #0]

	uint8_t MemAddress;
	uint8_t	 pata[5];
	uint16_t Devaddress=(Dev<<1);
 80004ae:	4b68      	ldr	r3, [pc, #416]	; (8000650 <alarm_write+0x1b0>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	83fb      	strh	r3, [r7, #30]

	MemAddress=CONTROL;
 80004b6:	230e      	movs	r3, #14
 80004b8:	777b      	strb	r3, [r7, #29]
	  uint8_t data;
	  HAL_I2C_Mem_Read(&hi2c1, Devaddress,MemAddress,1,&data,1,1000);
 80004ba:	7f7b      	ldrb	r3, [r7, #29]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	8bf9      	ldrh	r1, [r7, #30]
 80004c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c4:	9302      	str	r3, [sp, #8]
 80004c6:	2301      	movs	r3, #1
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	f107 0317 	add.w	r3, r7, #23
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	4860      	ldr	r0, [pc, #384]	; (8000654 <alarm_write+0x1b4>)
 80004d4:	f001 f88e 	bl	80015f4 <HAL_I2C_Mem_Read>
	 data &=0x00;
 80004d8:	2300      	movs	r3, #0
 80004da:	75fb      	strb	r3, [r7, #23]
	//HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
	 data &=0x05;
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	f003 0305 	and.w	r3, r3, #5
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &data,1,1000);
 80004e6:	7f7b      	ldrb	r3, [r7, #29]
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	8bf9      	ldrh	r1, [r7, #30]
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	9302      	str	r3, [sp, #8]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	f107 0317 	add.w	r3, r7, #23
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2301      	movs	r3, #1
 80004fe:	4855      	ldr	r0, [pc, #340]	; (8000654 <alarm_write+0x1b4>)
 8000500:	f000 ff7e 	bl	8001400 <HAL_I2C_Mem_Write>


	MemAddress=ALARM;
 8000504:	2307      	movs	r3, #7
 8000506:	777b      	strb	r3, [r7, #29]

	//pata[2]=integer_to_bcd(hr);
	pata[0]=integer_to_bcd(sec);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f945 	bl	8000798 <integer_to_bcd>
 800050e:	4603      	mov	r3, r0
 8000510:	b2db      	uxtb	r3, r3
 8000512:	763b      	strb	r3, [r7, #24]
	pata[1]=integer_to_bcd(min);
 8000514:	68b8      	ldr	r0, [r7, #8]
 8000516:	f000 f93f 	bl	8000798 <integer_to_bcd>
 800051a:	4603      	mov	r3, r0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	767b      	strb	r3, [r7, #25]
	pata[3]=integer_to_bcd(date);
 8000520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000522:	f000 f939 	bl	8000798 <integer_to_bcd>
 8000526:	4603      	mov	r3, r0
 8000528:	b2db      	uxtb	r3, r3
 800052a:	76fb      	strb	r3, [r7, #27]

	if(format==HR_FORMAT_24)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d106      	bne.n	8000540 <alarm_write+0xa0>
	pata[2]=integer_to_bcd(hr);
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f000 f930 	bl	8000798 <integer_to_bcd>
 8000538:	4603      	mov	r3, r0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	76bb      	strb	r3, [r7, #26]
 800053e:	e024      	b.n	800058a <alarm_write+0xea>
	else
	{
	pata[2]=integer_to_bcd(hr)|(1<<6);
 8000540:	68f8      	ldr	r0, [r7, #12]
 8000542:	f000 f929 	bl	8000798 <integer_to_bcd>
 8000546:	4603      	mov	r3, r0
 8000548:	b25b      	sxtb	r3, r3
 800054a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800054e:	b25b      	sxtb	r3, r3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	76bb      	strb	r3, [r7, #26]
	if(format==HR_FORMAT_12_PM)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d10a      	bne.n	8000570 <alarm_write+0xd0>
		pata[2]=integer_to_bcd(hr)|(1<<6)|(1<<5);
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f000 f91c 	bl	8000798 <integer_to_bcd>
 8000560:	4603      	mov	r3, r0
 8000562:	b25b      	sxtb	r3, r3
 8000564:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000568:	b25b      	sxtb	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	76bb      	strb	r3, [r7, #26]
 800056e:	e00c      	b.n	800058a <alarm_write+0xea>
	else if(format==HR_FORMAT_12_AM)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d109      	bne.n	800058a <alarm_write+0xea>
		pata[2]=integer_to_bcd(hr)|(1<<6);
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f000 f90e 	bl	8000798 <integer_to_bcd>
 800057c:	4603      	mov	r3, r0
 800057e:	b25b      	sxtb	r3, r3
 8000580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000584:	b25b      	sxtb	r3, r3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	76bb      	strb	r3, [r7, #26]
	}

	switch(mode)
 800058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800058c:	2b05      	cmp	r3, #5
 800058e:	d84b      	bhi.n	8000628 <alarm_write+0x188>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <alarm_write+0xf8>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005b1 	.word	0x080005b1
 800059c:	08000629 	.word	0x08000629
 80005a0:	080005bd 	.word	0x080005bd
 80005a4:	080005c9 	.word	0x080005c9
 80005a8:	080005df 	.word	0x080005df
 80005ac:	080005ff 	.word	0x080005ff
	{
	case ALARM_DY_H_M_S:
	{
		pata[3]|=(1<<6);
 80005b0:	7efb      	ldrb	r3, [r7, #27]
 80005b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	76fb      	strb	r3, [r7, #27]
	break;
 80005ba:	e036      	b.n	800062a <alarm_write+0x18a>
	}
	case ALARM_H_M_S:
	{
		pata[3]|=(1<<7);
 80005bc:	7efb      	ldrb	r3, [r7, #27]
 80005be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	76fb      	strb	r3, [r7, #27]
		break;
 80005c6:	e030      	b.n	800062a <alarm_write+0x18a>
	}
	case ALARM_M_S:
	{
		pata[2]|=(1<<7);
 80005c8:	7ebb      	ldrb	r3, [r7, #26]
 80005ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 80005d2:	7efb      	ldrb	r3, [r7, #27]
 80005d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	76fb      	strb	r3, [r7, #27]
		break;
 80005dc:	e025      	b.n	800062a <alarm_write+0x18a>
	}
	case ALARM_S:
	{   pata[1]|=(1<<7);
 80005de:	7e7b      	ldrb	r3, [r7, #25]
 80005e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	767b      	strb	r3, [r7, #25]
		pata[2]|=(1<<7);
 80005e8:	7ebb      	ldrb	r3, [r7, #26]
 80005ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 80005f2:	7efb      	ldrb	r3, [r7, #27]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	76fb      	strb	r3, [r7, #27]
		break;
 80005fc:	e015      	b.n	800062a <alarm_write+0x18a>
	}
	case ALARM_ONCE_PER_SECOND:
	{
		pata[0]|=(1<<7);
 80005fe:	7e3b      	ldrb	r3, [r7, #24]
 8000600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000604:	b2db      	uxtb	r3, r3
 8000606:	763b      	strb	r3, [r7, #24]
		pata[1]|=(1<<7);
 8000608:	7e7b      	ldrb	r3, [r7, #25]
 800060a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800060e:	b2db      	uxtb	r3, r3
 8000610:	767b      	strb	r3, [r7, #25]
		pata[2]|=(1<<7);
 8000612:	7ebb      	ldrb	r3, [r7, #26]
 8000614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000618:	b2db      	uxtb	r3, r3
 800061a:	76bb      	strb	r3, [r7, #26]
		pata[3]|=(1<<7);
 800061c:	7efb      	ldrb	r3, [r7, #27]
 800061e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000622:	b2db      	uxtb	r3, r3
 8000624:	76fb      	strb	r3, [r7, #27]
		break;
 8000626:	e000      	b.n	800062a <alarm_write+0x18a>
	}

default:
	break;
 8000628:	bf00      	nop
	}




	HAL_I2C_Mem_Write(&hi2c1, Devaddress, MemAddress, 1, &pata,4,1000);
 800062a:	7f7b      	ldrb	r3, [r7, #29]
 800062c:	b29a      	uxth	r2, r3
 800062e:	8bf9      	ldrh	r1, [r7, #30]
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	2304      	movs	r3, #4
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <alarm_write+0x1b4>)
 8000644:	f000 fedc 	bl	8001400 <HAL_I2C_Mem_Write>


}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	20000054 	.word	0x20000054

08000658 <print>:


//A10-RX A09-TX
void print(char *data)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(char *)data,strlen(data),1000);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fd73 	bl	800014c <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <print+0x28>)
 8000672:	f002 f9e4 	bl	8002a3e <HAL_UART_Transmit>

}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000a8 	.word	0x200000a8

08000684 <int_to_char>:

return p;
}

char *int_to_char(int c)
{
 8000684:	b480      	push	{r7}
 8000686:	b0a5      	sub	sp, #148	; 0x94
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 char s[100];

 int rem;
 int i=0;
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 if(c==0)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d126      	bne.n	80006e6 <int_to_char+0x62>
 return "0";
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <int_to_char+0x10c>)
 800069a:	e073      	b.n	8000784 <int_to_char+0x100>

while(c!=0)
{

rem=c%10;
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <int_to_char+0x110>)
 80006a0:	fb83 1302 	smull	r1, r3, r3, r2
 80006a4:	1099      	asrs	r1, r3, #2
 80006a6:	17d3      	asrs	r3, r2, #31
 80006a8:	1ac9      	subs	r1, r1, r3
 80006aa:	460b      	mov	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	440b      	add	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	67fb      	str	r3, [r7, #124]	; 0x7c
s[i]=rem + '0';
 80006b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	3330      	adds	r3, #48	; 0x30
 80006bc:	b2d9      	uxtb	r1, r3
 80006be:	f107 0218 	add.w	r2, r7, #24
 80006c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006c6:	4413      	add	r3, r2
 80006c8:	460a      	mov	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]

c=c/10;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <int_to_char+0x110>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	1092      	asrs	r2, r2, #2
 80006d6:	17db      	asrs	r3, r3, #31
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	607b      	str	r3, [r7, #4]
i++;
 80006dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006e0:	3301      	adds	r3, #1
 80006e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(c!=0)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1d7      	bne.n	800069c <int_to_char+0x18>
}
s[i]='\0';
 80006ec:	f107 0218 	add.w	r2, r7, #24
 80006f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006f4:	4413      	add	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
//printf(" ********%s******* ",s);
char u[10];
char *k=u;
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
for(int i=0;s[i]!='\0';i++){}
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000708:	e004      	b.n	8000714 <int_to_char+0x90>
 800070a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800070e:	3301      	adds	r3, #1
 8000710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000714:	f107 0218 	add.w	r2, r7, #24
 8000718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f2      	bne.n	800070a <int_to_char+0x86>
//printf(" %c ",s[i]);
//printf(" %s ",s);
i--;
 8000724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000728:	3b01      	subs	r3, #1
 800072a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
int j=0;
 800072e:	2300      	movs	r3, #0
 8000730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
for(j=0;i>=0;i--,j++)
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800073a:	e016      	b.n	800076a <int_to_char+0xe6>
{
 u[j]=s[i];
 800073c:	f107 0218 	add.w	r2, r7, #24
 8000740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000744:	4413      	add	r3, r2
 8000746:	7819      	ldrb	r1, [r3, #0]
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000750:	4413      	add	r3, r2
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
for(j=0;i>=0;i--,j++)
 8000756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800075a:	3b01      	subs	r3, #1
 800075c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000764:	3301      	adds	r3, #1
 8000766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800076a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800076e:	2b00      	cmp	r3, #0
 8000770:	dae4      	bge.n	800073c <int_to_char+0xb8>


}

u[j]='\0';
 8000772:	f107 020c 	add.w	r2, r7, #12
 8000776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800077a:	4413      	add	r3, r2
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

//printf(" %s ",k);
return k;
 8000780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
}
 8000784:	4618      	mov	r0, r3
 8000786:	3794      	adds	r7, #148	; 0x94
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	08002e20 	.word	0x08002e20
 8000794:	66666667 	.word	0x66666667

08000798 <integer_to_bcd>:
}

return c;
}
int integer_to_bcd(int num)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

int ones=num%10;
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <integer_to_bcd+0x48>)
 80007a4:	fb83 1302 	smull	r1, r3, r3, r2
 80007a8:	1099      	asrs	r1, r3, #2
 80007aa:	17d3      	asrs	r3, r2, #31
 80007ac:	1ac9      	subs	r1, r1, r3
 80007ae:	460b      	mov	r3, r1
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	440b      	add	r3, r1
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	60fb      	str	r3, [r7, #12]
int tens=num/10;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <integer_to_bcd+0x48>)
 80007be:	fb82 1203 	smull	r1, r2, r2, r3
 80007c2:	1092      	asrs	r2, r2, #2
 80007c4:	17db      	asrs	r3, r3, #31
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	60bb      	str	r3, [r7, #8]

num=(tens<<4)|ones;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]


return num;
 80007d4:	687b      	ldr	r3, [r7, #4]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	66666667 	.word	0x66666667

080007e4 <bcd_to_integer>:

int bcd_to_integer(int num)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	int ones=(num & 0x0F);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
	int tens=(num & 0xF0);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007fa:	60bb      	str	r3, [r7, #8]
tens=tens>>4;
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	111b      	asrs	r3, r3, #4
 8000800:	60bb      	str	r3, [r7, #8]
	return (tens*10+ones);
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	461a      	mov	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4413      	add	r3, r2



}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fa15 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f83d 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 f8cf 	bl	80009cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800082e:	f000 f875 	bl	800091c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000832:	f000 f8a1 	bl	8000978 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
int i=15;
 8000836:	230f      	movs	r3, #15
 8000838:	61fb      	str	r3, [r7, #28]

uint8_t hr=15;
 800083a:	230f      	movs	r3, #15
 800083c:	76fb      	strb	r3, [r7, #27]
uint8_t min=15;
 800083e:	230f      	movs	r3, #15
 8000840:	76bb      	strb	r3, [r7, #26]
uint8_t sec=19;
 8000842:	2313      	movs	r3, #19
 8000844:	767b      	strb	r3, [r7, #25]

time_write(hr,min,sec,HR_FORMAT_12_PM);
 8000846:	7ef8      	ldrb	r0, [r7, #27]
 8000848:	7eb9      	ldrb	r1, [r7, #26]
 800084a:	7e7a      	ldrb	r2, [r7, #25]
 800084c:	2302      	movs	r3, #2
 800084e:	f7ff fc85 	bl	800015c <time_write>
int day=MONDAY;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
int date=18;
 8000856:	2312      	movs	r3, #18
 8000858:	613b      	str	r3, [r7, #16]
int month=7;
 800085a:	2307      	movs	r3, #7
 800085c:	60fb      	str	r3, [r7, #12]
int year=21;
 800085e:	2315      	movs	r3, #21
 8000860:	60bb      	str	r3, [r7, #8]

date_write(day,date,month,year);
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	6939      	ldr	r1, [r7, #16]
 8000868:	6978      	ldr	r0, [r7, #20]
 800086a:	f7ff fcd7 	bl	800021c <date_write>
sec=12;
 800086e:	230c      	movs	r3, #12
 8000870:	767b      	strb	r3, [r7, #25]
//hr=1;




alarm_write(hr, min, sec, HR_FORMAT_12_PM, day, date,ALARM_H_M_S);
 8000872:	7ef8      	ldrb	r0, [r7, #27]
 8000874:	7eb9      	ldrb	r1, [r7, #26]
 8000876:	7e7a      	ldrb	r2, [r7, #25]
 8000878:	2302      	movs	r3, #2
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2302      	movs	r3, #2
 8000886:	f7ff fe0b 	bl	80004a0 <alarm_write>


//read_time(DATE);
//HAL_Delay(2000);
read_time();
 800088a:	f7ff fd03 	bl	8000294 <read_time>
read_date();
 800088e:	f7ff fd89 	bl	80003a4 <read_date>

uint8_t MemAddress=CONTROL_STATUS;
 8000892:	230f      	movs	r3, #15
 8000894:	71fb      	strb	r3, [r7, #7]

uint16_t Devaddress=(Dev<<1);
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <main+0x84>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	80bb      	strh	r3, [r7, #4]


    /* USER CODE END WHILE */
	  //HAL_UART_Transmit(&huart1,(char *)"HELLO",5,1000);
    /* USER CODE BEGIN 3 */
while (1)
 800089e:	e7fe      	b.n	800089e <main+0x82>
 80008a0:	20000028 	.word	0x20000028

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b090      	sub	sp, #64	; 0x40
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fa52 	bl	8002d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2310      	movs	r3, #16
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fc46 	bl	800216c <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008e6:	f000 f89f 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 feb2 	bl	800266c <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800090e:	f000 f88b 	bl	8000a28 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3740      	adds	r7, #64	; 0x40
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C1_Init+0x50>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_I2C1_Init+0x54>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C1_Init+0x50>)
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_I2C1_Init+0x58>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C1_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2C1_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_I2C1_Init+0x50>)
 800093a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_I2C1_Init+0x50>)
 800095a:	f000 fc19 	bl	8001190 <HAL_I2C_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000964:	f000 f860 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000054 	.word	0x20000054
 8000970:	40005400 	.word	0x40005400
 8000974:	000186a0 	.word	0x000186a0

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f001 fff8 	bl	80029a4 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f835 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000a8 	.word	0x200000a8
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f003 0320 	and.w	r3, r3, #32
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x58>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_GPIO_Init+0x58>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <MX_GPIO_Init+0x58>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_GPIO_Init+0x58>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <Error_Handler+0x6>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <HAL_I2C_MspInit+0x70>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d123      	bne.n	8000afc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000acc:	23c0      	movs	r3, #192	; 0xc0
 8000ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <HAL_I2C_MspInit+0x78>)
 8000ae0:	f000 f9fc 	bl	8000edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	61d3      	str	r3, [r2, #28]
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_I2C_MspInit+0x74>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d131      	bne.n	8000b94 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1a      	ldr	r2, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_MspInit+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b76:	f000 f9b1 	bl	8000edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_UART_MspInit+0x94>)
 8000b90:	f000 f9a4 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bee:	f000 f875 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c2a:	f7ff ffe4 	bl	8000bf6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 f871 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fdf3 	bl	800081c <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000c40:	08002e58 	.word	0x08002e58
  ldr r2, =_sbss
 8000c44:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000c48:	200000f0 	.word	0x200000f0

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f907 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fee0 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f911 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f8e7 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000002c 	.word	0x2000002c
 8000cd4:	20000034 	.word	0x20000034
 8000cd8:	20000030 	.word	0x20000030

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000034 	.word	0x20000034
 8000cfc:	200000ec 	.word	0x200000ec

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	200000ec 	.word	0x200000ec

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff90 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff49 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb0 	bl	8000e30 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e127      	b.n	8001140 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8116 	bne.w	800113a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d034      	beq.n	8000f80 <HAL_GPIO_Init+0xa4>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d80d      	bhi.n	8000f36 <HAL_GPIO_Init+0x5a>
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d02b      	beq.n	8000f76 <HAL_GPIO_Init+0x9a>
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d804      	bhi.n	8000f2c <HAL_GPIO_Init+0x50>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d031      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d01c      	beq.n	8000f64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f2a:	e048      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d043      	beq.n	8000fb8 <HAL_GPIO_Init+0xdc>
 8000f30:	2b11      	cmp	r3, #17
 8000f32:	d01b      	beq.n	8000f6c <HAL_GPIO_Init+0x90>
          break;
 8000f34:	e043      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f36:	4a89      	ldr	r2, [pc, #548]	; (800115c <HAL_GPIO_Init+0x280>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d026      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
 8000f3c:	4a87      	ldr	r2, [pc, #540]	; (800115c <HAL_GPIO_Init+0x280>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d806      	bhi.n	8000f50 <HAL_GPIO_Init+0x74>
 8000f42:	4a87      	ldr	r2, [pc, #540]	; (8001160 <HAL_GPIO_Init+0x284>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d020      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
 8000f48:	4a86      	ldr	r2, [pc, #536]	; (8001164 <HAL_GPIO_Init+0x288>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01d      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
          break;
 8000f4e:	e036      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f50:	4a85      	ldr	r2, [pc, #532]	; (8001168 <HAL_GPIO_Init+0x28c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
 8000f56:	4a85      	ldr	r2, [pc, #532]	; (800116c <HAL_GPIO_Init+0x290>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d016      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
 8000f5c:	4a84      	ldr	r2, [pc, #528]	; (8001170 <HAL_GPIO_Init+0x294>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xae>
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e028      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e023      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01e      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e019      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e012      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e008      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d801      	bhi.n	8000fc8 <HAL_GPIO_Init+0xec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	e001      	b.n	8000fcc <HAL_GPIO_Init+0xf0>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	2bff      	cmp	r3, #255	; 0xff
 8000fd2:	d802      	bhi.n	8000fda <HAL_GPIO_Init+0xfe>
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x104>
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	3b08      	subs	r3, #8
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	6a39      	ldr	r1, [r7, #32]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8096 	beq.w	800113a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	4b59      	ldr	r3, [pc, #356]	; (8001174 <HAL_GPIO_Init+0x298>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a58      	ldr	r2, [pc, #352]	; (8001174 <HAL_GPIO_Init+0x298>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x298>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001026:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_GPIO_Init+0x29c>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4b      	ldr	r2, [pc, #300]	; (800117c <HAL_GPIO_Init+0x2a0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x19e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4a      	ldr	r2, [pc, #296]	; (8001180 <HAL_GPIO_Init+0x2a4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x19a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x196>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2ac>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x192>
 800106a:	2303      	movs	r3, #3
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x1a0>
 800106e:	2304      	movs	r3, #4
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x1a0>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x1a0>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x1a0>
 800107a:	2300      	movs	r3, #0
 800107c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800108c:	493a      	ldr	r1, [pc, #232]	; (8001178 <HAL_GPIO_Init+0x29c>)
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4938      	ldr	r1, [pc, #224]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4933      	ldr	r1, [pc, #204]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010be:	4013      	ands	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	492e      	ldr	r1, [pc, #184]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
 80010da:	e006      	b.n	80010ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4929      	ldr	r1, [pc, #164]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4924      	ldr	r1, [pc, #144]	; (800118c <HAL_GPIO_Init+0x2b0>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	43db      	mvns	r3, r3
 800110c:	491f      	ldr	r1, [pc, #124]	; (800118c <HAL_GPIO_Init+0x2b0>)
 800110e:	4013      	ands	r3, r2
 8001110:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	491a      	ldr	r1, [pc, #104]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	60cb      	str	r3, [r1, #12]
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_GPIO_Init+0x2b0>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	43db      	mvns	r3, r3
 8001134:	4915      	ldr	r1, [pc, #84]	; (800118c <HAL_GPIO_Init+0x2b0>)
 8001136:	4013      	ands	r3, r2
 8001138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f aed0 	bne.w	8000ef0 <HAL_GPIO_Init+0x14>
  }
}
 8001150:	bf00      	nop
 8001152:	372c      	adds	r7, #44	; 0x2c
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	10210000 	.word	0x10210000
 8001160:	10110000 	.word	0x10110000
 8001164:	10120000 	.word	0x10120000
 8001168:	10310000 	.word	0x10310000
 800116c:	10320000 	.word	0x10320000
 8001170:	10220000 	.word	0x10220000
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00
 8001184:	40011000 	.word	0x40011000
 8001188:	40011400 	.word	0x40011400
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e11f      	b.n	80013e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fc6c 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2224      	movs	r2, #36	; 0x24
 80011c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011f4:	f001 fb90 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 80011f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4a7b      	ldr	r2, [pc, #492]	; (80013ec <HAL_I2C_Init+0x25c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d807      	bhi.n	8001214 <HAL_I2C_Init+0x84>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <HAL_I2C_Init+0x260>)
 8001208:	4293      	cmp	r3, r2
 800120a:	bf94      	ite	ls
 800120c:	2301      	movls	r3, #1
 800120e:	2300      	movhi	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	e006      	b.n	8001222 <HAL_I2C_Init+0x92>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4a77      	ldr	r2, [pc, #476]	; (80013f4 <HAL_I2C_Init+0x264>)
 8001218:	4293      	cmp	r3, r2
 800121a:	bf94      	ite	ls
 800121c:	2301      	movls	r3, #1
 800121e:	2300      	movhi	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0db      	b.n	80013e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4a72      	ldr	r2, [pc, #456]	; (80013f8 <HAL_I2C_Init+0x268>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	430a      	orrs	r2, r1
 8001248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4a64      	ldr	r2, [pc, #400]	; (80013ec <HAL_I2C_Init+0x25c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d802      	bhi.n	8001264 <HAL_I2C_Init+0xd4>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	e009      	b.n	8001278 <HAL_I2C_Init+0xe8>
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	4a63      	ldr	r2, [pc, #396]	; (80013fc <HAL_I2C_Init+0x26c>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	3301      	adds	r3, #1
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	430b      	orrs	r3, r1
 800127e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800128a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4956      	ldr	r1, [pc, #344]	; (80013ec <HAL_I2C_Init+0x25c>)
 8001294:	428b      	cmp	r3, r1
 8001296:	d80d      	bhi.n	80012b4 <HAL_I2C_Init+0x124>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1e59      	subs	r1, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	bf38      	it	cc
 80012b0:	2304      	movcc	r3, #4
 80012b2:	e04f      	b.n	8001354 <HAL_I2C_Init+0x1c4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d111      	bne.n	80012e0 <HAL_I2C_Init+0x150>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1e58      	subs	r0, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	440b      	add	r3, r1
 80012ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e012      	b.n	8001306 <HAL_I2C_Init+0x176>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1e58      	subs	r0, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	0099      	lsls	r1, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_I2C_Init+0x17e>
 800130a:	2301      	movs	r3, #1
 800130c:	e022      	b.n	8001354 <HAL_I2C_Init+0x1c4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10e      	bne.n	8001334 <HAL_I2C_Init+0x1a4>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1e58      	subs	r0, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6859      	ldr	r1, [r3, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	440b      	add	r3, r1
 8001324:	fbb0 f3f3 	udiv	r3, r0, r3
 8001328:	3301      	adds	r3, #1
 800132a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001332:	e00f      	b.n	8001354 <HAL_I2C_Init+0x1c4>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	0099      	lsls	r1, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	fbb0 f3f3 	udiv	r3, r0, r3
 800134a:	3301      	adds	r3, #1
 800134c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	6809      	ldr	r1, [r1, #0]
 8001358:	4313      	orrs	r3, r2
 800135a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6911      	ldr	r1, [r2, #16]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68d2      	ldr	r2, [r2, #12]
 800138e:	4311      	orrs	r1, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	430b      	orrs	r3, r1
 8001396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2220      	movs	r2, #32
 80013ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	000186a0 	.word	0x000186a0
 80013f0:	001e847f 	.word	0x001e847f
 80013f4:	003d08ff 	.word	0x003d08ff
 80013f8:	431bde83 	.word	0x431bde83
 80013fc:	10624dd3 	.word	0x10624dd3

08001400 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	817b      	strh	r3, [r7, #10]
 8001412:	460b      	mov	r3, r1
 8001414:	813b      	strh	r3, [r7, #8]
 8001416:	4613      	mov	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800141a:	f7ff fc71 	bl	8000d00 <HAL_GetTick>
 800141e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b20      	cmp	r3, #32
 800142a:	f040 80d9 	bne.w	80015e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2319      	movs	r3, #25
 8001434:	2201      	movs	r2, #1
 8001436:	496d      	ldr	r1, [pc, #436]	; (80015ec <HAL_I2C_Mem_Write+0x1ec>)
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fcbb 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001444:	2302      	movs	r3, #2
 8001446:	e0cc      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Mem_Write+0x56>
 8001452:	2302      	movs	r3, #2
 8001454:	e0c5      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d007      	beq.n	800147c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800148a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2221      	movs	r2, #33	; 0x21
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_I2C_Mem_Write+0x1f0>)
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014be:	88f8      	ldrh	r0, [r7, #6]
 80014c0:	893a      	ldrh	r2, [r7, #8]
 80014c2:	8979      	ldrh	r1, [r7, #10]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4603      	mov	r3, r0
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 faf2 	bl	8001ab8 <I2C_RequestMemoryWrite>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d052      	beq.n	8001580 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e081      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 fd3c 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00d      	beq.n	800150a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d107      	bne.n	8001506 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e06b      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	d11b      	bne.n	8001580 <HAL_I2C_Mem_Write+0x180>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	d017      	beq.n	8001580 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1aa      	bne.n	80014de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 fd28 	bl	8001fe2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00d      	beq.n	80015b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2b04      	cmp	r3, #4
 800159e:	d107      	bne.n	80015b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e016      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2220      	movs	r2, #32
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015e0:	2302      	movs	r3, #2
  }
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	00100002 	.word	0x00100002
 80015f0:	ffff0000 	.word	0xffff0000

080015f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	; 0x30
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	817b      	strh	r3, [r7, #10]
 8001606:	460b      	mov	r3, r1
 8001608:	813b      	strh	r3, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001612:	f7ff fb75 	bl	8000d00 <HAL_GetTick>
 8001616:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b20      	cmp	r3, #32
 8001622:	f040 823d 	bne.w	8001aa0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2319      	movs	r3, #25
 800162c:	2201      	movs	r2, #1
 800162e:	4981      	ldr	r1, [pc, #516]	; (8001834 <HAL_I2C_Mem_Read+0x240>)
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fbbf 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800163c:	2302      	movs	r3, #2
 800163e:	e230      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_I2C_Mem_Read+0x5a>
 800164a:	2302      	movs	r3, #2
 800164c:	e229      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d007      	beq.n	8001674 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2222      	movs	r2, #34	; 0x22
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4a61      	ldr	r2, [pc, #388]	; (8001838 <HAL_I2C_Mem_Read+0x244>)
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016b6:	88f8      	ldrh	r0, [r7, #6]
 80016b8:	893a      	ldrh	r2, [r7, #8]
 80016ba:	8979      	ldrh	r1, [r7, #10]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4603      	mov	r3, r0
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa8c 	bl	8001be4 <I2C_RequestMemoryRead>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1e5      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d113      	bne.n	8001706 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e1b9      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	2b01      	cmp	r3, #1
 800170c:	d11d      	bne.n	800174a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001744:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001746:	b662      	cpsie	i
 8001748:	e197      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	2b02      	cmp	r3, #2
 8001750:	d11d      	bne.n	800178e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001762:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001788:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800178a:	b662      	cpsie	i
 800178c:	e175      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800179c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80017b4:	e161      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	f200 811a 	bhi.w	80019f4 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d123      	bne.n	8001810 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fc49 	bl	8002064 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e162      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800180e:	e134      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	2b02      	cmp	r3, #2
 8001816:	d150      	bne.n	80018ba <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181e:	2200      	movs	r2, #0
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <HAL_I2C_Mem_Read+0x248>)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fac6 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e137      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
 8001832:	bf00      	nop
 8001834:	00100002 	.word	0x00100002
 8001838:	ffff0000 	.word	0xffff0000
 800183c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001850:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001884:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018b8:	e0df      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c0:	2200      	movs	r2, #0
 80018c2:	497a      	ldr	r1, [pc, #488]	; (8001aac <HAL_I2C_Mem_Read+0x4b8>)
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fa75 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0e6      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001918:	4b65      	ldr	r3, [pc, #404]	; (8001ab0 <HAL_I2C_Mem_Read+0x4bc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	4a65      	ldr	r2, [pc, #404]	; (8001ab4 <HAL_I2C_Mem_Read+0x4c0>)
 8001920:	fba2 2303 	umull	r2, r3, r2, r3
 8001924:	0a1a      	lsrs	r2, r3, #8
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00da      	lsls	r2, r3, #3
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	3b01      	subs	r3, #1
 8001936:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d117      	bne.n	800196e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001960:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e099      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b04      	cmp	r3, #4
 800197a:	d1da      	bne.n	8001932 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019be:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019f2:	e042      	b.n	8001a7a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 fb33 	bl	8002064 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e04c      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d118      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f ae99 	bne.w	80017b6 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	00010004 	.word	0x00010004
 8001ab0:	2000002c 	.word	0x2000002c
 8001ab4:	14f8b589 	.word	0x14f8b589

08001ab8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	817b      	strh	r3, [r7, #10]
 8001aca:	460b      	mov	r3, r1
 8001acc:	813b      	strh	r3, [r7, #8]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f960 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b08:	d103      	bne.n	8001b12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e05f      	b.n	8001bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	492d      	ldr	r1, [pc, #180]	; (8001be0 <I2C_RequestMemoryWrite+0x128>)
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f998 	bl	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04c      	b.n	8001bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fa02 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d107      	bne.n	8001b7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e02b      	b.n	8001bd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	e021      	b.n	8001bd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b90:	893b      	ldrh	r3, [r7, #8]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f9dc 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d107      	bne.n	8001bc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e005      	b.n	8001bd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bca:	893b      	ldrh	r3, [r7, #8]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	00010002 	.word	0x00010002

08001be4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	817b      	strh	r3, [r7, #10]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	813b      	strh	r3, [r7, #8]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f8c2 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c44:	d103      	bne.n	8001c4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0aa      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	4952      	ldr	r1, [pc, #328]	; (8001db0 <I2C_RequestMemoryRead+0x1cc>)
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f8fa 	bl	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e097      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	6a39      	ldr	r1, [r7, #32]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f964 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d107      	bne.n	8001cb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e076      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc0:	893b      	ldrh	r3, [r7, #8]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	e021      	b.n	8001d10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ccc:	893b      	ldrh	r3, [r7, #8]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f93e 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d107      	bne.n	8001d02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e050      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d06:	893b      	ldrh	r3, [r7, #8]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	6a39      	ldr	r1, [r7, #32]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f923 	bl	8001f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00d      	beq.n	8001d3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e035      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f82b 	bl	8001db4 <I2C_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d72:	d103      	bne.n	8001d7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e013      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d80:	897b      	ldrh	r3, [r7, #10]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	6a3a      	ldr	r2, [r7, #32]
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <I2C_RequestMemoryRead+0x1cc>)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f863 	bl	8001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	00010002 	.word	0x00010002

08001db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dc4:	e025      	b.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d021      	beq.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7fe ff97 	bl	8000d00 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d116      	bne.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e023      	b.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10d      	bne.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4013      	ands	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	e00c      	b.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d0b6      	beq.n	8001dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b084      	sub	sp, #16
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e70:	e051      	b.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e80:	d123      	bne.n	8001eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f043 0204 	orr.w	r2, r3, #4
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e046      	b.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d021      	beq.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7fe ff15 	bl	8000d00 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d116      	bne.n	8001f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e020      	b.n	8001f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	e00b      	b.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d18d      	bne.n	8001e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f6c:	e02d      	b.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f8ce 	bl	8002110 <I2C_IsAcknowledgeFailed>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e02d      	b.n	8001fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d021      	beq.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f86:	f7fe febb 	bl	8000d00 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d302      	bcc.n	8001f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d116      	bne.n	8001fca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f043 0220 	orr.w	r2, r3, #32
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e007      	b.n	8001fda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d1ca      	bne.n	8001f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fee:	e02d      	b.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f88d 	bl	8002110 <I2C_IsAcknowledgeFailed>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e02d      	b.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d021      	beq.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002008:	f7fe fe7a 	bl	8000d00 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d302      	bcc.n	800201e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e007      	b.n	800205c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d1ca      	bne.n	8001ff0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002070:	e042      	b.n	80020f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d119      	bne.n	80020b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e029      	b.n	8002108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b4:	f7fe fe24 	bl	8000d00 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d302      	bcc.n	80020ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b40      	cmp	r3, #64	; 0x40
 8002104:	d1b5      	bne.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d11b      	bne.n	8002160 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002130:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e26c      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8087 	beq.w	800229a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800218c:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 030c 	and.w	r3, r3, #12
 8002194:	2b04      	cmp	r3, #4
 8002196:	d00c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002198:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d112      	bne.n	80021ca <HAL_RCC_OscConfig+0x5e>
 80021a4:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b0:	d10b      	bne.n	80021ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d06c      	beq.n	8002298 <HAL_RCC_OscConfig+0x12c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d168      	bne.n	8002298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e246      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x76>
 80021d4:	4b80      	ldr	r3, [pc, #512]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a7f      	ldr	r2, [pc, #508]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e02e      	b.n	8002240 <HAL_RCC_OscConfig+0xd4>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x98>
 80021ea:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a7a      	ldr	r2, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b78      	ldr	r3, [pc, #480]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a77      	ldr	r2, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e01d      	b.n	8002240 <HAL_RCC_OscConfig+0xd4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0xbc>
 800220e:	4b72      	ldr	r3, [pc, #456]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a71      	ldr	r2, [pc, #452]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6e      	ldr	r2, [pc, #440]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0xd4>
 8002228:	4b6b      	ldr	r3, [pc, #428]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800222e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b68      	ldr	r3, [pc, #416]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a67      	ldr	r2, [pc, #412]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800223a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d013      	beq.n	8002270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fd5a 	bl	8000d00 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe fd56 	bl	8000d00 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1fa      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0xe4>
 800226e:	e014      	b.n	800229a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fd46 	bl	8000d00 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7fe fd42 	bl	8000d00 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1e6      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x10c>
 8002296:	e000      	b.n	800229a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d063      	beq.n	800236e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a6:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x18c>
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x176>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1ba      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4939      	ldr	r1, [pc, #228]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e03a      	b.n	800236e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x270>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fcfb 	bl	8000d00 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fcf7 	bl	8000d00 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e19b      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x270>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fcda 	bl	8000d00 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe fcd6 	bl	8000d00 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e17a      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03a      	beq.n	80023f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d019      	beq.n	80023b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_RCC_OscConfig+0x274>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7fe fcba 	bl	8000d00 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe fcb6 	bl	8000d00 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e15a      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f000 fada 	bl	8002968 <RCC_Delay>
 80023b4:	e01c      	b.n	80023f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_OscConfig+0x274>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fca0 	bl	8000d00 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c2:	e00f      	b.n	80023e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe fc9c 	bl	8000d00 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d908      	bls.n	80023e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e140      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	42420000 	.word	0x42420000
 80023e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	4b9e      	ldr	r3, [pc, #632]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e9      	bne.n	80023c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a6 	beq.w	800254a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002402:	4b97      	ldr	r3, [pc, #604]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b94      	ldr	r3, [pc, #592]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a93      	ldr	r2, [pc, #588]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b91      	ldr	r3, [pc, #580]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b8e      	ldr	r3, [pc, #568]	; (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d118      	bne.n	8002468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002436:	4b8b      	ldr	r3, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a8a      	ldr	r2, [pc, #552]	; (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002442:	f7fe fc5d 	bl	8000d00 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244a:	f7fe fc59 	bl	8000d00 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b64      	cmp	r3, #100	; 0x64
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0fd      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x312>
 8002470:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a7a      	ldr	r2, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e02d      	b.n	80024da <HAL_RCC_OscConfig+0x36e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x334>
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	4a75      	ldr	r2, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6213      	str	r3, [r2, #32]
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a72      	ldr	r2, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	6213      	str	r3, [r2, #32]
 800249e:	e01c      	b.n	80024da <HAL_RCC_OscConfig+0x36e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b05      	cmp	r3, #5
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x356>
 80024a8:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6c      	ldr	r2, [pc, #432]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a69      	ldr	r2, [pc, #420]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6213      	str	r3, [r2, #32]
 80024c0:	e00b      	b.n	80024da <HAL_RCC_OscConfig+0x36e>
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	4b64      	ldr	r3, [pc, #400]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a63      	ldr	r2, [pc, #396]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	f023 0304 	bic.w	r3, r3, #4
 80024d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d015      	beq.n	800250e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fc0d 	bl	8000d00 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fc09 	bl	8000d00 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0ab      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	4b57      	ldr	r3, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ee      	beq.n	80024ea <HAL_RCC_OscConfig+0x37e>
 800250c:	e014      	b.n	8002538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fbf7 	bl	8000d00 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fbf3 	bl	8000d00 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e095      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ee      	bne.n	8002516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d105      	bne.n	800254a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a47      	ldr	r2, [pc, #284]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8081 	beq.w	8002656 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002554:	4b42      	ldr	r3, [pc, #264]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d061      	beq.n	8002624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d146      	bne.n	80025f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_OscConfig+0x4fc>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fbc7 	bl	8000d00 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fbc3 	bl	8000d00 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e067      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d108      	bne.n	80025b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	492d      	ldr	r1, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a19      	ldr	r1, [r3, #32]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	430b      	orrs	r3, r1
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b27      	ldr	r3, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x4fc>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fb97 	bl	8000d00 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7fe fb93 	bl	8000d00 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e037      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x46a>
 80025f4:	e02f      	b.n	8002656 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_RCC_OscConfig+0x4fc>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fb80 	bl	8000d00 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fb7c 	bl	8000d00 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e020      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x498>
 8002622:	e018      	b.n	8002656 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e013      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	42420060 	.word	0x42420060

0800266c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0d0      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b6a      	ldr	r3, [pc, #424]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d910      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4965      	ldr	r1, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d040      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d115      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e073      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4936      	ldr	r1, [pc, #216]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7fe fad0 	bl	8000d00 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7fe facc 	bl	8000d00 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e053      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d210      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 0207 	bic.w	r2, r3, #7
 80027a2:	4922      	ldr	r1, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4601      	mov	r1, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	fa21 f303 	lsr.w	r3, r1, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1cc>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1d0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fa2e 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	08002e38 	.word	0x08002e38
 8002838:	2000002c 	.word	0x2000002c
 800283c:	20000030 	.word	0x20000030

08002840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	b490      	push	{r4, r7}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002846:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002848:	1d3c      	adds	r4, r7, #4
 800284a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800284c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x46>
 800287e:	e02d      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002882:	623b      	str	r3, [r7, #32]
      break;
 8002884:	e02d      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002892:	4413      	add	r3, r2
 8002894:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002898:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c5b      	lsrs	r3, r3, #17
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b2:	4413      	add	r3, r2
 80028b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80028be:	fb02 f203 	mul.w	r2, r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ca:	e004      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	623b      	str	r3, [r7, #32]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80028de:	623b      	str	r3, [r7, #32]
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6a3b      	ldr	r3, [r7, #32]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc90      	pop	{r4, r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	08002e24 	.word	0x08002e24
 80028f4:	08002e34 	.word	0x08002e34
 80028f8:	40021000 	.word	0x40021000
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	003d0900 	.word	0x003d0900

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <HAL_RCC_GetHCLKFreq+0x10>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	2000002c 	.word	0x2000002c

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002920:	4601      	mov	r1, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08002e48 	.word	0x08002e48

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffde 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002948:	4601      	mov	r1, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	fa21 f303 	lsr.w	r3, r1, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08002e48 	.word	0x08002e48

08002968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCC_Delay+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <RCC_Delay+0x38>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002984:	bf00      	nop
  }
  while (Delay --);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <RCC_Delay+0x1c>
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000002c 	.word	0x2000002c
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e03f      	b.n	8002a36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f8a0 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f905 	bl	8002bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b08a      	sub	sp, #40	; 0x28
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d17c      	bne.n	8002b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_UART_Transmit+0x2c>
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e075      	b.n	8002b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Transmit+0x3e>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e06e      	b.n	8002b5a <HAL_UART_Transmit+0x11c>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2221      	movs	r2, #33	; 0x21
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a92:	f7fe f935 	bl	8000d00 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	88fa      	ldrh	r2, [r7, #6]
 8002aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d108      	bne.n	8002ac0 <HAL_UART_Transmit+0x82>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d104      	bne.n	8002ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	e003      	b.n	8002ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ad0:	e02a      	b.n	8002b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f840 	bl	8002b62 <UART_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e036      	b.n	8002b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10b      	bne.n	8002b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3302      	adds	r3, #2
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	e007      	b.n	8002b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3301      	adds	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1cf      	bne.n	8002ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2140      	movs	r1, #64	; 0x40
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f810 	bl	8002b62 <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e006      	b.n	8002b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e000      	b.n	8002b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
  }
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b72:	e02c      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d028      	beq.n	8002bce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b82:	f7fe f8bd 	bl	8000d00 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d21d      	bcs.n	8002bce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ba0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e00f      	b.n	8002bee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	bf0c      	ite	eq
 8002bde:	2301      	moveq	r3, #1
 8002be0:	2300      	movne	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d0c3      	beq.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c32:	f023 030c 	bic.w	r3, r3, #12
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <UART_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c60:	f7ff fe6e 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	e002      	b.n	8002c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7ff fe56 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <UART_SetConfig+0x118>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	0119      	lsls	r1, r3, #4
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <UART_SetConfig+0x118>)
 8002ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2064      	movs	r0, #100	; 0x64
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	; 0x32
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <UART_SetConfig+0x118>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	4419      	add	r1, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	440a      	add	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	51eb851f 	.word	0x51eb851f

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	2500      	movs	r5, #0
 8002d18:	4e0c      	ldr	r6, [pc, #48]	; (8002d4c <__libc_init_array+0x38>)
 8002d1a:	4c0d      	ldr	r4, [pc, #52]	; (8002d50 <__libc_init_array+0x3c>)
 8002d1c:	1ba4      	subs	r4, r4, r6
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	42a5      	cmp	r5, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	f000 f822 	bl	8002d6c <_init>
 8002d28:	2500      	movs	r5, #0
 8002d2a:	4e0a      	ldr	r6, [pc, #40]	; (8002d54 <__libc_init_array+0x40>)
 8002d2c:	4c0a      	ldr	r4, [pc, #40]	; (8002d58 <__libc_init_array+0x44>)
 8002d2e:	1ba4      	subs	r4, r4, r6
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	42a5      	cmp	r5, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3c:	4798      	blx	r3
 8002d3e:	3501      	adds	r5, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d46:	4798      	blx	r3
 8002d48:	3501      	adds	r5, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002e50 	.word	0x08002e50
 8002d50:	08002e50 	.word	0x08002e50
 8002d54:	08002e50 	.word	0x08002e50
 8002d58:	08002e54 	.word	0x08002e54

08002d5c <memset>:
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4402      	add	r2, r0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memset+0xa>
 8002d64:	4770      	bx	lr
 8002d66:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6a:	e7f9      	b.n	8002d60 <memset+0x4>

08002d6c <_init>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr

08002d78 <_fini>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr
